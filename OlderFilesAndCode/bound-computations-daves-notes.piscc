# From Michelle's email of 9/9/14,
#  with assumption that her -32 was -(tau-1)

[T, Li, Ui, Lj, Uj] ->
{ computation[t, i, j] -> [c0, c1, c2, t, i, j] :
  tau*c2 >= -t - i + tau*c0 - tau*c1 &&
  tau*c2 <= tau-1 - t - i + tau*c0 - tau*c1 &&
  tau*c1 <= t + j &&
  tau*c1 >= -(tau-1) + t + j &&
  tau*c2 <= t - i - j &&
  tau*c2 >= -(tau-1) + t - i - j &&
  t >= 1 &&
  t <= (tau/3)-2 &&
  i >= Li &&
  i <= -1 + Ui &&
  j >= Lj &&
  j <= -1 + Uj
}

# Simpliflying this abstractly, note that T does not appear in constrants,
#  Li, Lj, Ui, and Uj serve only as one bound (e.g., Li as a lower bound),
#  meaning we can discard the constraint with Li in it, since it cannot
#  limit the values of other variables in any way (i.e., we can always set
#  Li higher if that constraint might have been false).
# So if we don't care about bounds on these free variables,
#  but only about the ways in which they constrain e.g. c0, we can simplify to

{ computation[t, i, j] -> [c0, c1, c2, t, i, j] :
  tau*c2 >= -t - i + tau*c0 - tau*c1 &&
  tau*c2 <= tau-1 - t - i + tau*c0 - tau*c1 &&
  tau*c1 <= t + j &&
  tau*c1 >= -(tau-1) + t + j &&
  tau*c2 <= t - i - j &&
  tau*c2 >= -(tau-1) + t - i - j &&
  t >= 1 &&
  t <= (tau/3)-2 &&
}


# Turn bounds involving c0 into bounds _on_ c0
[T, Li, Ui, Lj, Uj] ->
{ computation[t, i, j] -> [c0, c1, c2, t, i, j] :
  t+i + tau*c2 + tau*c1 >= tau*c0           &&
  t+i + tau*c2 + tau*c1 <= tau*c0 + (tau-1) &&
  tau*c1 <= t + j &&
  tau*c1 >= -(tau-1) + t + j &&
  tau*c2 <= t - i - j &&
  tau*c2 >= -(tau-1) + t - i - j &&
  t >= 1 &&
  t <= (tau/3)-2 &&
}


# Rearrange a bit, to get a sequence of
#     Y -(tau-1) <= tau*X <= Y
# steps, in which each X is not seen below:

{ computation[t, i, j] -> [c0, c1, c2, t, i, j] :
  t+i + tau*c2 + tau*c1 -(tau-1) <= tau*c0 &&
                                    tau*c0 <= t+i + tau*c2 + tau*c1  &&

  t+j   -(tau-1) <= tau*c1 &&
                    tau*c1 <= t+j &&

  t-i-j -(tau-1) <= tau*c2 &&
                    tau*c2 <= t-i-j &&

  1 <= t <= (tau/3)-2 &&
}

# Now observe that equations of the form
#     Y -(tau-1) <= tau*X <= Y
# are equivalent to
#     X = Y - Y%tau
# so we have

{ computation[t, i, j] -> [c0, c1, c2, t, i, j] :
  t0 = (t+i + tau*c2 + tau*c1) mod tau &&
  c1 = (t+j) mod tau   &&
  c2 = (t-i-j) mod tau &&
  1 <= t <= (tau/3)-2 &&
}

# note that tau*c2 and tau*c1 are both 0, mod tau, so we get

{ computation[t, i, j] -> [c0, c1, c2, t, i, j] :
  c0 = (t+i)   mod tau &&
  c1 = (t+j)   mod tau &&
  c2 = (t-i-j) mod tau &&
  1 <= t <= (tau/3)-2
}


# And thus, if i, and j can be arbitrarily large (non-negative) numbers, then c0 and c1 range 0... tau-1
