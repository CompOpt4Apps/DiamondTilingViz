[T, N] -> { farce[i, j] : 1 = 0 }
[T, Lj, Uj, Li, Ui] -> { [c0, c1] : c0 >= 1 and 145c1 >= 45 + Lj + 45c0 and 145c1 >= 144 - 2T + Lj + 145c0 and 145c1 >= 1 + Lj and 145c1 <= 98 + Uj + 45c0 and 145c1 <= -1 + T + Uj and 145c1 <= 285 + Uj + 145c0 }
[T, Lj, Uj, Li, Ui] -> { [c0, c1] : c0 >= 1 and 145c1 >= 45 + Lj + 45c0 and 145c1 >= 144 - 2T + Lj + 145c0 and 145c1 >= 1 + Lj and 145c1 <= 98 + Uj + 45c0 and 145c1 <= -1 + T + Uj and 145c1 <= 285 + Uj + 145c0 }
[T, Li, Ui, Lj, Uj] -> { computation[t, i, j] : t >= 1 and t <= 8 and i >= Li and i <= -1 + Ui and j >= Lj and j <= -1 + Uj }
[T, Li, Ui, Lj, Uj] -> { computation[t, i, j] -> [thyme, k1, k2, t, i, j] : 33k2 >= -t - i + 33thyme - 33k1 and 33k2 <= 32 - t - i + 33thyme - 33k1 and 33k1 <= t + j and 33k1 >= -32 + t + j and 33k2 <= t - i - j and 33k2 >= -32 + t - i - j and t >= 1 and t <= 8 and i >= Li and i <= -1 + Ui and j >= Lj and j <= -1 + Uj }
for (int c0 = -2; c0 <= 0; c0 += 1)
  for (int c1 = max(floord(Lj + 1, 33), c0 + floord(Lj + 16, 33)); c1 <= min(floord(Uj + 7, 33), c0 + floord(Uj - 5, 33) + 2); c1 += 1)
    for (int c2 = max(max(max(max(max(c0 - 2 * c1 + floord(-Ui + Lj + 1, 33), -c1 + floord(-2 * Ui - Uj + 33 * c0 + 33 * c1 - 30, 66) + 1), c1 + floord(-Ui - 2 * Uj + 3, 33)), floord(-Ui - Uj + 3, 33)), c0 - c1 + floord(-Ui - 8, 33) + 1), -c1 + floord(-Ui + 4, 33) - 1); c2 <= min(min(min(min(min(-c1 + floord(-2 * Li - Lj + 33 * c0 + 33 * c1 + 32, 66), c0 - 2 * c1 + floord(-Li + Uj - 2, 33) + 1), c0 - c1 + floord(-Li - 2, 33) + 1), -c1 + floord(-Li + 16, 33)), floord(-Li - Lj + 8, 33)), c1 + floord(-Li - 2 * Lj - 1, 33) + 1); c2 += 1)
      for (int c3 = max(max(max(max(max(-Uj + 33 * c1 + 1, 1), 16 * c0 - 17 * c1 + floord(Lj + c0 + c1 + 1, 2)), 16 * c1 + 16 * c2 + floord(Li + c1 + c2 + 1, 2)), Li + Lj + 33 * c2), -Ui + 33 * c0 - 33 * c1 - 33 * c2 + 1); c3 <= min(min(min(min(min(16 * c1 + 16 * c2 + floord(Ui + c1 + c2 + 1, 2) + 31, 16 * c0 - 17 * c1 + floord(Uj + c0 + c1 + 1, 2) + 31), -Lj + 33 * c1 + 32), -Li + 33 * c0 - 33 * c1 - 33 * c2 + 32), Ui + Uj + 33 * c2 + 30), 8); c3 += 1)
        for (int c4 = max(max(max(-33 * c1 - 33 * c2 + 2 * c3 - 64, -Uj - 33 * c2 + c3 - 31), 33 * c0 - 33 * c1 - 33 * c2 - c3), Li); c4 <= min(min(min(33 * c0 - 33 * c1 - 33 * c2 - c3 + 32, -33 * c1 - 33 * c2 + 2 * c3), -Lj - 33 * c2 + c3), Ui - 1); c4 += 1)
          for (int c5 = max(max(33 * c1 - c3, Lj), -33 * c2 + c3 - c4 - 32); c5 <= min(min(Uj - 1, -33 * c2 + c3 - c4), 33 * c1 - c3 + 32); c5 += 1)
            computation(c3, c4, c5);
[T, Li, Ui, Lj, Uj] -> { computation[t, i, j] : t >= 1 and t <= 8 and i >= Li and i <= -1 + Ui and j >= Lj and j <= -1 + Uj }
[T, Li, Ui, Lj, Uj] -> { computation[t, i, j] : t >= 1 and t <= 9 and i >= Li and i <= -1 + Ui and j >= Lj and j <= -1 + Uj }
[T, Li, Ui, Lj, Uj] -> { computation[t, i, j] : t >= 1 and t <= 49 and i >= Li and i <= -1 + Ui and j >= Lj and j <= -1 + Uj }
[T, Li, Ui, Lj, Uj] -> { computation[t, i, j] : t >= 1 and t <= 50 and i >= Li and i <= -1 + Ui and j >= Lj and j <= -1 + Uj }
[T, Li, Ui, Lj, Uj] -> { computation[t, i, j] -> [thyme, k1, k2, t, i, j] : 156k2 >= -t - i + 156thyme - 156k1 and 156k2 <= 155 - t - i + 156thyme - 156k1 and 156k1 <= t + j and 156k1 >= -155 + t + j and 156k2 <= t - i - j and 156k2 >= -155 + t - i - j and t >= 1 and t <= 49 and i >= Li and i <= -1 + Ui and j >= Lj and j <= -1 + Uj }
for (int c0 = -2; c0 <= 0; c0 += 1)
  for (int c1 = max(floord(Lj + 1, 156), c0 + floord(Lj + 57, 156)); c1 <= min(floord(Uj + 48, 156), c0 + floord(Uj - 5, 156) + 2); c1 += 1)
    for (int c2 = max(max(max(max(max(c0 - 2 * c1 + floord(-Ui + Lj + 1, 156), -c1 + floord(-2 * Ui - Uj + 156 * c0 + 156 * c1 - 153, 312) + 1), c1 + floord(-Ui - 2 * Uj + 3, 156)), floord(-Ui - Uj + 3, 156)), c0 - c1 + floord(-Ui - 49, 156) + 1), -c1 + floord(-Ui + 4, 156) - 1); c2 <= min(min(min(min(min(-c1 + floord(-2 * Li - Lj + 156 * c0 + 156 * c1 + 155, 312), c0 - 2 * c1 + floord(-Li + Uj - 2, 156) + 1), c0 - c1 + floord(-Li - 2, 156) + 1), -c1 + floord(-Li - 58, 156) + 1), floord(-Li - Lj + 49, 156)), c1 + floord(-Li - 2 * Lj - 1, 156) + 1); c2 += 1)
      for (int c3 = max(max(max(max(max(-Uj + 156 * c1 + 1, 1), 78 * c0 - 78 * c1 + floord(Lj + 1, 2)), 78 * c1 + 78 * c2 + floord(Li + 1, 2)), Li + Lj + 156 * c2), -Ui + 156 * c0 - 156 * c1 - 156 * c2 + 1); c3 <= min(min(min(min(min(78 * c1 + 78 * c2 + floord(Ui + 1, 2) + 154, 78 * c0 - 78 * c1 + floord(Uj + 1, 2) + 154), -Lj + 156 * c1 + 155), -Li + 156 * c0 - 156 * c1 - 156 * c2 + 155), Ui + Uj + 156 * c2 + 153), 49); c3 += 1)
        for (int c4 = max(max(max(-156 * c1 - 156 * c2 + 2 * c3 - 310, -Uj - 156 * c2 + c3 - 154), 156 * c0 - 156 * c1 - 156 * c2 - c3), Li); c4 <= min(min(min(156 * c0 - 156 * c1 - 156 * c2 - c3 + 155, -156 * c1 - 156 * c2 + 2 * c3), -Lj - 156 * c2 + c3), Ui - 1); c4 += 1)
          for (int c5 = max(max(156 * c1 - c3, Lj), -156 * c2 + c3 - c4 - 155); c5 <= min(min(Uj - 1, -156 * c2 + c3 - c4), 156 * c1 - c3 + 155); c5 += 1)
            computation(c3, c4, c5);
[T, Li, Ui, Lj, Uj] -> { computation[t, i, j] -> [-2, k1, k2, t, i, j] : 156k2 >= -312 - t - i - 156k1 and 156k2 <= -157 - t - i - 156k1 and 156k1 <= t + j and 156k1 >= -155 + t + j and 156k2 <= t - i - j and 156k2 >= -155 + t - i - j and t >= 1 and t <= 49 and i >= Li and i <= -1 + Ui and j >= Lj and j <= -1 + Uj }
for (int c1 = floord(Lj + 1, 156); c1 <= floord(Uj - 5, 156); c1 += 1)
  for (int c2 = max(-c1 + floord(-Ui + 4, 156) - 1, floord(-Ui - Uj + 3, 156)); c2 < -c1 + floord(-Li - 2, 156); c2 += 1)
    for (int c3 = 1; c3 <= min(min(min(min(min(78 * c1 + 78 * c2 + floord(Ui + 1, 2) + 154, -Lj + 156 * c1 + 155), Ui + Uj + 156 * c2 + 153), 49), -78 * c1 + floord(Uj + 1, 2) - 2), -Li - 156 * c1 - 156 * c2 - 157); c3 += 1)
      for (int c4 = max(max(-Uj - 156 * c2 + c3 - 154, Li), -156 * c1 - 156 * c2 + 2 * c3 - 310); c4 < min(Ui, -156 * c1 - 156 * c2 - c3 - 156); c4 += 1)
        for (int c5 = max(Lj, -156 * c2 + c3 - c4 - 155); c5 <= min(156 * c1 - c3 + 155, Uj - 1); c5 += 1)
          computation(c3, c4, c5);
[T, Li, Ui, Lj, Uj] -> { computation[t, i, j] -> [-2, k1, k2, t, i, j] : 33k2 >= -66 - t - i - 33k1 and 33k2 <= -34 - t - i - 33k1 and 33k1 <= t + j and 33k1 >= -32 + t + j and 33k2 <= t - i - j and 33k2 >= -32 + t - i - j and t >= 1 and t <= 8 and i >= Li and i <= -1 + Ui and j >= Lj and j <= -1 + Uj }
for (int c1 = floord(Lj + 1, 33); c1 <= floord(Uj - 5, 33); c1 += 1)
  for (int c2 = max(-c1 + floord(-Ui + 4, 33) - 1, floord(-Ui - Uj + 3, 33)); c2 < -c1 + floord(-Li - 2, 33); c2 += 1)
    for (int c3 = 1; c3 <= min(min(min(min(min(16 * c1 + 16 * c2 + floord(Ui + c1 + c2 + 1, 2) + 31, -Lj + 33 * c1 + 32), Ui + Uj + 33 * c2 + 30), 8), -17 * c1 + floord(Uj + c1 + 1, 2) - 2), -Li - 33 * c1 - 33 * c2 - 34); c3 += 1)
      for (int c4 = max(max(-Uj - 33 * c2 + c3 - 31, Li), -33 * c1 - 33 * c2 + 2 * c3 - 64); c4 < min(Ui, -33 * c1 - 33 * c2 - c3 - 33); c4 += 1)
        for (int c5 = max(Lj, -33 * c2 + c3 - c4 - 32); c5 <= min(33 * c1 - c3 + 32, Uj - 1); c5 += 1)
          computation(c3, c4, c5);
[T, Li, Ui, Lj, Uj] -> { computation[t, i, j] -> [-1, k1, k2, t, i, j] : 33k2 >= -33 - t - i - 33k1 and 33k2 <= -1 - t - i - 33k1 and 33k1 <= t + j and 33k1 >= -32 + t + j and 33k2 <= t - i - j and 33k2 >= -32 + t - i - j and t >= 1 and t <= 8 and i >= Li and i <= -1 + Ui and j >= Lj and j <= -1 + Uj }
for (int c1 = floord(Lj + 1, 33); c1 <= floord(Uj + 7, 33); c1 += 1)
  for (int c2 = max(max(max(max(floord(-Ui - Uj + 3, 33), c1 + floord(-Ui - 2 * Uj + 3, 33)), -2 * c1 + floord(-Ui + Lj + 1, 33) - 1), -c1 + floord(-2 * Ui - Uj + 33 * c1 + 3, 66)), -c1 + floord(-Ui - 8, 33)); c2 <= min(min(min(min(-c1 + floord(-2 * Li - Lj + 33 * c1 - 1, 66), floord(-Li - Lj + 8, 33)), c1 + floord(-Li - 2 * Lj - 1, 33) + 1), -c1 + floord(-Li - 2, 33)), -2 * c1 + floord(-Li + Uj - 2, 33)); c2 += 1)
    for (int c3 = max(max(max(Li + Lj + 33 * c2, -Uj + 33 * c1 + 1), 1), -Ui - 33 * c1 - 33 * c2 - 32); c3 <= min(min(min(Ui + Uj + 33 * c2 + 30, 8), -Li - 33 * c1 - 33 * c2 - 1), -Lj + 33 * c1 + 32); c3 += 1)
      for (int c4 = max(max(Li, -33 * c1 - 33 * c2 - c3 - 33), -Uj - 33 * c2 + c3 - 31); c4 <= min(min(-Lj - 33 * c2 + c3, Ui - 1), -33 * c1 - 33 * c2 - c3 - 1); c4 += 1)
        for (int c5 = max(max(-33 * c2 + c3 - c4 - 32, 33 * c1 - c3), Lj); c5 <= min(min(Uj - 1, -33 * c2 + c3 - c4), 33 * c1 - c3 + 32); c5 += 1)
          computation(c3, c4, c5);
[T, Li, Ui, Lj, Uj] -> { computation[t, i, j] -> [-1, k1, k2, t, i, j] : 36k2 >= -36 - t - i - 36k1 and 36k2 <= -1 - t - i - 36k1 and 36k1 <= t + j and 36k1 >= -35 + t + j and 36k2 <= t - i - j and 36k2 >= -35 + t - i - j and t >= 1 and t <= 9 and i >= Li and i <= -1 + Ui and j >= Lj and j <= -1 + Uj }
for (int c1 = floord(Lj + 1, 36); c1 <= floord(Uj + 8, 36); c1 += 1)
  for (int c2 = max(max(max(max(floord(-Ui - Uj + 3, 36), c1 + floord(-Ui - 2 * Uj + 3, 36)), -2 * c1 + floord(-Ui + Lj + 1, 36) - 1), -c1 + floord(-2 * Ui - Uj + 36 * c1 + 3, 72)), -c1 + floord(-Ui - 9, 36)); c2 <= min(min(min(min(-c1 + floord(-2 * Li - Lj + 36 * c1 - 1, 72), floord(-Li - Lj + 9, 36)), c1 + floord(-Li - 2 * Lj - 1, 36) + 1), -c1 + floord(-Li - 2, 36)), -2 * c1 + floord(-Li + Uj - 2, 36)); c2 += 1)
    for (int c3 = max(max(max(Li + Lj + 36 * c2, -Uj + 36 * c1 + 1), 1), -Ui - 36 * c1 - 36 * c2 - 35); c3 <= min(min(min(Ui + Uj + 36 * c2 + 33, 9), -Li - 36 * c1 - 36 * c2 - 1), -Lj + 36 * c1 + 35); c3 += 1)
      for (int c4 = max(max(Li, -36 * c1 - 36 * c2 - c3 - 36), -Uj - 36 * c2 + c3 - 34); c4 <= min(min(-Lj - 36 * c2 + c3, Ui - 1), -36 * c1 - 36 * c2 - c3 - 1); c4 += 1)
        for (int c5 = max(max(-36 * c2 + c3 - c4 - 35, 36 * c1 - c3), Lj); c5 <= min(min(Uj - 1, -36 * c2 + c3 - c4), 36 * c1 - c3 + 35); c5 += 1)
          computation(c3, c4, c5);
[T, Li, Ui, Lj, Uj] -> { computation[t, i, j] -> [-1, k1, k2, t, i, j] : 156k2 >= -156 - t - i - 156k1 and 156k2 <= -1 - t - i - 156k1 and 156k1 <= t + j and 156k1 >= -155 + t + j and 156k2 <= t - i - j and 156k2 >= -155 + t - i - j and t >= 1 and t <= 49 and i >= Li and i <= -1 + Ui and j >= Lj and j <= -1 + Uj }
for (int c1 = floord(Lj + 1, 156); c1 <= floord(Uj + 48, 156); c1 += 1)
  for (int c2 = max(max(max(max(floord(-Ui - Uj + 3, 156), c1 + floord(-Ui - 2 * Uj + 3, 156)), -2 * c1 + floord(-Ui + Lj + 1, 156) - 1), -c1 + floord(-2 * Ui - Uj + 156 * c1 + 3, 312)), -c1 + floord(-Ui - 49, 156)); c2 <= min(min(min(min(-c1 + floord(-2 * Li - Lj + 156 * c1 - 1, 312), floord(-Li - Lj + 49, 156)), c1 + floord(-Li - 2 * Lj - 1, 156) + 1), -c1 + floord(-Li - 2, 156)), -2 * c1 + floord(-Li + Uj - 2, 156)); c2 += 1)
    for (int c3 = max(max(max(Li + Lj + 156 * c2, -Uj + 156 * c1 + 1), 1), -Ui - 156 * c1 - 156 * c2 - 155); c3 <= min(min(min(Ui + Uj + 156 * c2 + 153, 49), -Li - 156 * c1 - 156 * c2 - 1), -Lj + 156 * c1 + 155); c3 += 1)
      for (int c4 = max(max(Li, -156 * c1 - 156 * c2 - c3 - 156), -Uj - 156 * c2 + c3 - 154); c4 <= min(min(-Lj - 156 * c2 + c3, Ui - 1), -156 * c1 - 156 * c2 - c3 - 1); c4 += 1)
        for (int c5 = max(max(-156 * c2 + c3 - c4 - 155, 156 * c1 - c3), Lj); c5 <= min(min(Uj - 1, -156 * c2 + c3 - c4), 156 * c1 - c3 + 155); c5 += 1)
          computation(c3, c4, c5);
[T, Li, Ui, Lj, Uj] -> { computation[t, i, j] -> [-1, k1, k2, t, i, j] : 159k2 >= -159 - t - i - 159k1 and 159k2 <= -1 - t - i - 159k1 and 159k1 <= t + j and 159k1 >= -158 + t + j and 159k2 <= t - i - j and 159k2 >= -158 + t - i - j and t >= 1 and t <= 50 and i >= Li and i <= -1 + Ui and j >= Lj and j <= -1 + Uj }
for (int c1 = floord(Lj + 1, 159); c1 <= floord(Uj + 49, 159); c1 += 1)
  for (int c2 = max(max(max(max(floord(-Ui - Uj + 3, 159), c1 + floord(-Ui - 2 * Uj + 3, 159)), -2 * c1 + floord(-Ui + Lj + 1, 159) - 1), -c1 + floord(-2 * Ui - Uj + 159 * c1 + 3, 318)), -c1 + floord(-Ui - 50, 159)); c2 <= min(min(min(min(-c1 + floord(-2 * Li - Lj + 159 * c1 - 1, 318), floord(-Li - Lj + 50, 159)), c1 + floord(-Li - 2 * Lj - 1, 159) + 1), -c1 + floord(-Li - 2, 159)), -2 * c1 + floord(-Li + Uj - 2, 159)); c2 += 1)
    for (int c3 = max(max(max(Li + Lj + 159 * c2, -Uj + 159 * c1 + 1), 1), -Ui - 159 * c1 - 159 * c2 - 158); c3 <= min(min(min(Ui + Uj + 159 * c2 + 156, 50), -Li - 159 * c1 - 159 * c2 - 1), -Lj + 159 * c1 + 158); c3 += 1)
      for (int c4 = max(max(Li, -159 * c1 - 159 * c2 - c3 - 159), -Uj - 159 * c2 + c3 - 157); c4 <= min(min(-Lj - 159 * c2 + c3, Ui - 1), -159 * c1 - 159 * c2 - c3 - 1); c4 += 1)
        for (int c5 = max(max(-159 * c2 + c3 - c4 - 158, 159 * c1 - c3), Lj); c5 <= min(min(Uj - 1, -159 * c2 + c3 - c4), 159 * c1 - c3 + 158); c5 += 1)
          computation(c3, c4, c5);
[T, Li, Ui, Lj, Uj] -> { computation[t, i, j] -> [0, k1, k2, t, i, j] : 36k2 >= -t - i - 36k1 and 36k2 <= 35 - t - i - 36k1 and 36k1 <= t + j and 36k1 >= -35 + t + j and 36k2 <= t - i - j and 36k2 >= -35 + t - i - j and t >= 1 and t <= 9 and i >= Li and i <= -1 + Ui and j >= Lj and j <= -1 + Uj }
for (int c1 = floord(Lj + 17, 36); c1 <= floord(Uj + 8, 36); c1 += 1)
  for (int c2 = -c1 + floord(-Ui - 9, 36) + 1; c2 <= min(-c1 + floord(-Li + 18, 36), floord(-Li - Lj + 9, 36)); c2 += 1)
    for (int c3 = max(max(max(max(max(-18 * c1 + floord(Lj + 1, 2), 18 * c1 + 18 * c2 + floord(Li + 1, 2)), Li + Lj + 36 * c2), -Ui - 36 * c1 - 36 * c2 + 1), -Uj + 36 * c1 + 1), 1); c3 <= 9; c3 += 1)
      for (int c4 = max(Li, -36 * c1 - 36 * c2 - c3); c4 <= min(min(-36 * c1 - 36 * c2 + 2 * c3, -Lj - 36 * c2 + c3), Ui - 1); c4 += 1)
        for (int c5 = max(36 * c1 - c3, Lj); c5 <= min(-36 * c2 + c3 - c4, Uj - 1); c5 += 1)
          computation(c3, c4, c5);
[T, Li, Ui, Lj, Uj] -> { computation[t, i, j] -> [0, k1, k2, t, i, j] : 156k2 >= -t - i - 156k1 and 156k2 <= 155 - t - i - 156k1 and 156k1 <= t + j and 156k1 >= -155 + t + j and 156k2 <= t - i - j and 156k2 >= -155 + t - i - j and t >= 1 and t <= 49 and i >= Li and i <= -1 + Ui and j >= Lj and j <= -1 + Uj }
for (int c1 = floord(Lj + 57, 156); c1 <= floord(Uj + 48, 156); c1 += 1)
  for (int c2 = -c1 + floord(-Ui - 49, 156) + 1; c2 <= min(-c1 + floord(-Li - 58, 156) + 1, floord(-Li - Lj + 49, 156)); c2 += 1)
    for (int c3 = max(max(max(max(max(-78 * c1 + floord(Lj + 1, 2), 78 * c1 + 78 * c2 + floord(Li + 1, 2)), Li + Lj + 156 * c2), -Ui - 156 * c1 - 156 * c2 + 1), -Uj + 156 * c1 + 1), 1); c3 <= 49; c3 += 1)
      for (int c4 = max(Li, -156 * c1 - 156 * c2 - c3); c4 <= min(min(-156 * c1 - 156 * c2 + 2 * c3, -Lj - 156 * c2 + c3), Ui - 1); c4 += 1)
        for (int c5 = max(156 * c1 - c3, Lj); c5 <= min(-156 * c2 + c3 - c4, Uj - 1); c5 += 1)
          computation(c3, c4, c5);
