# The footprint for one 2D tile.

# This is the file facts.piscc, which is prepended to the .piscc files
# for the particular code generation we want to make an iscc input file.
# This defines things like the iteration space and dependences.
# Known facts are inserted by the # Makefile.
#
# If you're looking at a .iscc file instead of facts.piscc, then you should
# remember to edit the original .piscc files, not the .iscc files.
#
# This facts.piscc file describes the program
#
# for(i = 0; i <= N-1; i++) {	// main INIT
#  A[i]=init(i);
# }
# new[0]   = A[0]
# new[N-1] = A[N-1]
#	// STARTCLOCK
# for(t = 1; t <= T; t+=2) {	// CALC loop
#  for(i = 1; i < N-1; i++) {
#     neew[i] = (A[i-1]+2*A[i]+A[i+1])*0.25;
#   for(i = 1; i < N-1; i++) {
#     A[i] = (neew[i-1]+2*neew[i]+neew[i+1])*0.25;
#  }
# }


# first, the spaces and memory maps

#IS_INIT := [T, N] -> { do_init[t,i]     : 0=t    && 0<=i<=N-1 };
#IS_EDGE := [T, N] -> { do_edge[t,i]     : 0=t    && (i=0 || i=N-1)};

#IS_STARTCLOCK := { startclock[] };

#IS_CALC1 := [T, N] -> { calc1[t,i]     : 0<t<=T && 0< i< N-1 && t%2 = 1};
#IS_CALC2 := [T, N] -> { calc2[t,i]     : 0<t<=T && 0< i< N-1 && t%2 = 0};
IS_CALC := [T, N, LT, LN] -> { calc2[t,i]     : LT<t<=T && LN< i< N-1 };

#IS_ALL := IS_INIT + IS_EDGE + IS_STARTCLOCK + IS_CALC1 + IS_CALC2;
IS_ALL := IS_CALC;

#
# original code without mmap, what I hope is the "diamond" tiling, but with original t/i order within tiles
#

# Original statements left alone, but put in a 5-d iteration space; middle dimension is processor dimension
#T012 := {
#  do_init[t, i] -> [0, 0, 0, t, i];
#  do_edge[t, i] -> [1, 0, 0, t, i];
#  startclock[]  -> [2, 0, 0, 0, 0];
#};

# TRANSFORMATION for calculation steps ... first let's say they are the same except for parity of t (copied from orig0.piscc):
T3_orig := {
  calc1[t, i]   -> [3, 0, 0, t, i];  # Note t is odd here ...
  calc2[t, i]   -> [3, 0, 0, t, i];  #  ... and even here, so a total order is defined
};
# Skew to diagonal wavefront within each time step
T_SKEW := { [3, 0, 0, t, i] -> [3, distance, altitude, 0, 0,t,i] : distance=t+i && altitude=t-i };  # altitude increases w/t
# Create tiles within the new space (tb=t div TAU, tx=t mod TAU, etc.)
#T_TILE := { [3,distance,altitude,0,0,t,i] -> [3,db,ab,dx,ax,t,i] :
#	    0<=ax<TAU   &&  altitude=  TAU*ab+ax &&
#	    0<=dx<SIGMA &&  distance=SIGMA*db+dx };

# Just one tile and its projection on i.
T_TILE := [TAU, SIGMA] -> { [3,distance,altitude,0,0,t,i] -> [i] :
	    exists ax, dx: 0<=ax<TAU   &&  altitude=  TAU+ax &&
	    0<=dx<SIGMA &&  distance=SIGMA+dx };

# Collect concurrently-ready tiles into one parallel loop ("time" is an oc keyword)
# (Remember that there is dataflow along the 'wave' dimension above)
#T_PAR  := { [3,db,ab,dx,ax,t,i] -> [3,thyme,conc_tiles,t,i] :
# 	    thyme=db+ab && conc_tiles=db-ab }; 


#T3 := T3_orig . T_SKEW . T_TILE . T_PAR;
T3 := T3_orig . T_SKEW . T_TILE ;

#Trans := T012 + T3;
Trans := T3;

codegen (Trans * IS_ALL);
