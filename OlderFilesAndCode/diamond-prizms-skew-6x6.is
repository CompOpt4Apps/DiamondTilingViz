{
  for (c4 = 0; c4 < N; c4 += 1)
    for (c5 = 0; c5 < N; c5 += 1)
      do_init_pong(c4, c5);
  for (c4 = 0; c4 < N; c4 += 1) {
    do_edge_pong(c4, 0);
    if (c4 + 1 == N)
      for (c5 = 1; c5 < N - 1; c5 += 1)
        do_edge_pong(N - 1, c5);
    if (c4 == 0)
      for (c5 = 1; c5 < N - 1; c5 += 1)
        do_edge_pong(0, c5);
    if (N >= 2)
      do_edge_pong(c4, N - 1);
  }
  startclock();
  if (T >= 1)
    for (c1 = -1; c1 <= T / 3; c1 += 1)
      for (c2 = max(max(floord(-N + 3 * c1 - 1, 6) + 1, c1 + floord(-T - N + 1, 6) + 1), floord(-N + 3, 6)); c2 <= min(floord(c1, 2), (T - 1) / 6); c2 += 1) {
        if (N % 2 == 0 && 6 * c1 >= N + 6 * c2 && 3 * c1 + 1 >= N + 6 * c2) {
          for (c5 = 1; c5 < N - 1; c5 += 1)
            calc_pong(-N + 6 * c1 - 6 * c2 + 2, N - 2, c5);
        } else if (2 * floord(c1, 2) == c1 && N + 6 * c2 >= 3 * c1 + 2 && c1 >= 2 * c2 + 2 && c1 >= 2)
          for (c5 = 1; c5 < N - 1; c5 += 1)
            calc_pong(3 * c1, 3 * c1 - 6 * c2, c5);
        for (c3 = max(max(max(-(N % 2) - N + 6 * c1 - 6 * c2 + 3, 2 * c1 + 2 * floord(c1, 2) + 1), 1), 6 * c2 + 1); c3 <= min(min(min(3 * c1 + 5, 6 * c1 - 6 * c2 + 4), N + 6 * c2 + 3), T); c3 += 2) {
          for (c4 = max(max(6 * c1 - 6 * c2 - c3, 1), -6 * c2 + c3 - 5); c4 <= min(min(N - 2, 6 * c1 - 6 * c2 - c3 + 5), -6 * c2 + c3); c4 += 1)
            for (c5 = 1; c5 < N - 1; c5 += 1)
              calc_ping(c3, c4, c5);
          if (T >= c3 + 1)
            for (c4 = max(max(6 * c1 - 6 * c2 - c3 - 1, 1), -6 * c2 + c3 - 4); c4 <= min(min(N - 2, 6 * c1 - 6 * c2 - c3 + 4), -6 * c2 + c3 + 1); c4 += 1)
              for (c5 = 1; c5 < N - 1; c5 += 1)
                calc_pong(c3 + 1, c4, c5);
        }
      }
}
