### Diamond Prizms scheduling with no ping pong storage allocation
# Also doing no time skew initially as well.
#
# original code without mmap
# diamond tiling in t and i dimensions and inner loop j
# is not tiled.  Therefore diamond prizms.
# The tile space for these has not been skewed so can't
# parallelize either of the loops over diamond prizms because
# they both carry a dependence.
#

# Original statements left alone, but put in a 7-d iteration space
# 3 extra dimensions for 2 dimensions of 2d-diamond prizm tiling
T012 := {
  do_init_pong[i,j] -> [0, 0, 0, 0, i, j];
  do_edge_pong[i,j] -> [1, 0, 0, 0, i, j];
  startclock[]      -> [2, 0, 0, 0, 0, 0];
};

# Diamond tiling in the t and i directions.
# Tiling hyperplanes.
# 1  1  0
# 1 -1  0
# For time skew, Want to replace k0 with thyme=k0+k1.  All diagonal tiles
# with same value of thyme can execute in parallel.
T3_calc := {
  calc[t,i,j]  -> [3, k0, k1, t, i, j] :
    exists r0,r1: 0 <=r0<TAU && 0<=r1<SIGMA 
    && TAU*k0+r0 = t+i && SIGMA*k1+r1 = t-i
};
T3_pong := {
  calc_pong[t,i,j]  -> [3, k0, k1, t, i, j] :
    exists r0,r1: 0 <=r0<TAU && 0<=r1<SIGMA 
    && TAU*k0+r0 = t+i && SIGMA*k1+r1 = t-i
};

Trans := T012 + T3_calc;

#codegen (Trans * IS_ALL);
codegen (Trans * IS_ALL) assuming [T,N] -> { : T>=2 && N>=4 && N>T};


