# This is the file facts.piscc, which is prepended to the .piscc files
# for the particular code generation we want to make an iscc input file.
# This defines things like the iteration space and dependences.
# Known facts are inserted by the # Makefile.
#
# If you're looking at a .iscc file instead of facts.piscc, then you should
# remember to edit the original .piscc files, not the .iscc files.
#
# This facts.piscc file describes the program
#
# for(i = 0; i <= N-1; i++) {	// main INIT
#  A[0,i]=init(i);
# }
# for (t = 1; t <= T; t++) {	// EDGE init
#  A[t,0]=init(0);
#  A[t,N-1]=init(N-1);
# }
#	// STARTCLOCK
# for(t = 1; t <= T; t++) {	// CALC loop
#  for(i = 1; i < N-1; i++) {
#   A[t,i] = (A[t-1,i-1]+2*A[t-1,i]+A[t-1,i+1])*0.25;
#  }
# }
# But with only two lines of A stored (t and t-1)

# for(i = 0; i <= N-1; i++) { // internal value init
#   for(j = 0; j <= N-1; j++) {
#     A(0,i,j)=init(i,j);
#   }
# }
# for (i=0; i<=N-1; i++) {      // EDGE initialization
#   do_edge_pong(i, 0);   // A(*,i,0)=0
#   do_edge_pong(i, N-1); // A(*,i,N-1)=0
# }
# for (j=0; j<=N-1; j++) {      // EDGE initialization
#   do_edge_pong(0, j);   // A(*,0,j)=0
#   do_edge_pong(N-1, j); // A(*,N-1,j)=0
# }
# startclock(); // start_time = cur_time();
# for(t = 1; t <= T; t++) {  // COMPUTATION
#   if (t%2 == 1) {
#     for(i = 1; i < N-1; i++) {
#       for(j = 1; j < N-1; j++) {
#         A(t,i,j) =
#         (A(t-1,i-1,j)+A(t-1,i,j-1)+A(t-1,i+1,j)+A(t-1,i,j+1)+2*A(t-1,i,j))*.167;
#       }
#     }
#   }
#   if (t%2 == 0) {
#     for(i = 1; i < N-1; i++) {
#       for(j = 1; j < N-1; j++) {
#         A(t+1,i,j) =
#         (A(t,i-1,j)+A(t,i,j-1)+A(t,i+1,j)+A(t,i,j+1)+2*A(t,i,j))*.167;
#       }
#     }
#   }
# }
# But with only two copies of A stored (t and t-1)
#

# first, the spaces and memory maps

IS_INIT := [T, N] -> { do_init_pong[i,j] : 0<=i<N && 0<=j<N };
IS_EDGE := [T, N] -> { do_edge_pong[i,j] : 
    (0<=i<N && (j=0 || j=N-1)) || ( 0<=j<N && (i=0 || i=N-1)) };

IS_STARTCLOCK := { startclock[] };

IS_CALC_PING := [T, N]->{ calc_ping[t,i,j] : 1<=t<=T && 0<i<N-1 && 0<j<N-1 && t%2=1 };
IS_CALC_PONG := [T, N]->{ calc_pong[t,i,j] : 1<=t<=T && 0<i<N-1 && 0<j<N-1 && t%2=0 };

IS_ALL := IS_INIT + IS_EDGE + IS_STARTCLOCK + IS_CALC_PING + IS_CALC_PONG;
 
#
# original code without mmap
# diamond tiling in t and i dimensions and inner loop j
# is not tiled.  Therefore diamond prizms.
# The tile space for these has not been skewed so can't
# parallelize either of the loops over diamond prizms because
# they both carry a dependence.
#

# Original statements left alone, but put in a 7-d iteration space
# 3 extra dimensions for 2 dimensions of 2d-diamond prizm tiling
T012 := {
  do_init_pong[i,j] -> [0, 0, 0, 0, i, j];
  do_edge_pong[i,j] -> [1, 0, 0, 0, i, j];
  startclock[]      -> [2, 0, 0, 0, 0, 0];
};

# Diamond tiling in the t and i directions.
# Tiling hyperplanes.
# 1  1  0
# 1 -1  0
# Want to replace k0 with thyme=k0+k1.  All diagonal tiles
# with same value of thyme can execute in parallel.
T3_ping := {
  calc_ping[t,i,j]  -> [3, thyme, k1, t, i, j] :
    exists k0,r0,r1: 0 <=r0<21 && 0<=r1<21 
    && 21*k0+r0 = t+i && 21*k1+r1 = t-i
    && thyme=k0+k1
};
T3_pong := {
  calc_pong[t,i,j]  -> [3, thyme, k1, t, i, j] :
    exists k0,r0,r1: 0 <=r0<21 && 0<=r1<21 
    && 21*k0+r0 = t+i && 21*k1+r1 = t-i
    && thyme=k0+k1
};

Trans := T012 + T3_ping + T3_pong;

codegen (Trans * IS_ALL);
#codegen (Trans * IS_ALL) assuming [T,N] -> { : T%2=0 && T>=2 && N>=4 && N>T};


