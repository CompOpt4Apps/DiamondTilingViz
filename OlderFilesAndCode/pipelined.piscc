#
# parallelegram/pipelined tiling, not skewed for parallelism yet
#

# Original statements left alone, but put in a 8-d iteration space
# 3 extra dimensions for 3 dimensions of 3d-diamond tiling
T012 := {
  do_init_pong[i,j] -> [0, 0, 0, 0, 0, 0, i, j];
  do_edge_pong[i,j] -> [1, 0, 0, 0, 0, 0, i, j];
  startclock[]      -> [2, 0, 0, 0, 0, 0, 0, 0];
};

# tiling hyperplanes for parallelogram tiles in 3D
# 1 0 0   # tiling through time is rectangular
# 1 1 0
# 1 0 1
T3_ping := {
  calc_ping[t,i,j]  -> [3, k0, k1, k2, t, 0, i, j] :
    exists r0,r1,r2: 0 <=r0<TAU && 0<=r1<SIGMA && 0<=r2<GAMMA
    && TAU*k0+r0 = t && SIGMA*k1+r1 = t+i && GAMMA*k2+r2 = t+j
};
T3_pong := {
  calc_pong[t,i,j]  -> [3, k0, k1, k2, t, 0, i, j]:
    exists r0,r1,r2: 0 <=r0<TAU && 0<=r1<SIGMA && 0<=r2<GAMMA
    && TAU*k0+r0 = t && SIGMA*k1+r1 = t+i && GAMMA*k2+r2 = t+j
};

Trans := T012 + T3_ping + T3_pong;

codegen (Trans * IS_ALL);

