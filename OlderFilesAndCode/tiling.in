# what does tiled code look like?
S := { [i,j] : 1 <= i <= 6 && 1 <= j <= 5 };

# My own notes on tiling from CS 560
#        Tiling specification
#            {[i,j] -> [ti, tj, i, j] | ti = (i-1)/2 and tj = (j-1)/2}
#        
#        Transformed iteration space (-1s are to put tile origin at 1,1)
#            {[ti, tj, i, j] | ti = (i-1)/2 and tj = (j-1)/2 
#                              and 1<=i<=6 and 1<=j<=5 }
#
#        Note that the above is not a polyhedron because of the
#        integer division.  We can use the remainder theorem
#        to create affine inequalities.
#        
#            ti = (i-1)/2
#                becomes
#            0 <= ri < 2 and (i-1) = ti*2 + ri
#            
#            tj = (j-1)/2
#                becomes
#            0 <= rj < 2 and (j-1) = tj*2 + rj


# tiling transformation
T := {[i,j] -> [ti,tj,i,j] : Exists (ri,rj: 0 <= ri < 2 and i-1 = ti*2 + ri 
                                            and 0 <= rj < 2 and j-1 = tj*2+ rj)};
                                            

codegen T(S);

# Now using tiling hyperplanes. Above the tiling hyperplanes were (1,0) for ti
# and (0,1) for tj. 
# Let's try (1,0) and (1,1) with the iteration space starting at 0,0..
#        Tiling specification
#            {[t,i] -> [tt, ti, t, i] | tt = (t)/2 and ti = (i+j)/2}
S := { [t,i] : 0 <= i <= 6 && 0 <= t <= 5 };
T := {[t,i] -> [tt,ti,t,i] : Exists (rt,ri: 0 <= rt < 2 and t = tt*2 + rt 
                                            and 0 <= ri < 2 and t+i = ti*2+ ri)};

codegen T(S);

# Now we need to skew the tiles so we get a loop over a wavefront.
# and (0,1) for tj. 
# Let's try (1,0) and (1,1) with the iteration space starting at 0,0..
#       Tiling specification
#            {[t,i] -> [tt, ti, t, i] | tt = (t)/2 and ti = (i+j)/2}
#       Skewing needed
#           in notebook need to do tile 0,2 and 1,1 in parallel
#           also 0,3 and 1,2

S := { [t,i] : 0 <= i <= 6 && 0 <= t <= 5 };
T := {[t,i] -> [tt,ti,t,i] : Exists (rt,ri: 0 <= rt < 2 and t = tt*2 + rt 
                                            and 0 <= ri < 2 and t+i = ti*2+ ri)};
tileskew := {[tt,ti,t,i]->[tt+ti,ti,t,i] };
T := tileskew compose T;
# works
codegen T(S);
# doesn't work
codegen S:T;

