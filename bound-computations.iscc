# What does iscc do when I give it an empty set
emptyS := [T,N] -> { farce[i,j] : 1<i<N && i+N < j < N };
emptyS;
# [T, N] -> { farce[i, j] : 1 = 0 }

#### Diamond Slab Tiling Questions

## Only have 3 phases of tiles per slab.
# Show for (int c0 = -2; c0 <= floord(T, tau/3); c0 += 1)
# can be replaced with for (int c0 = -2; c0 <= 0; c0 += 1).
#   s = (tau/3) -2, 1<=subset_s<=s
#
#     for (int c1 = max(max(floord(Lj + (tau/3) * c0 + (tau/3), tau), 
#       c0 + floord(-2 * T + Lj - 1, tau) + 1), 
#       floord(Lj + 1, tau)); 
#       c1 <= min(min(floord(Uj + (tau/3) * c0 - ((tau/3)+2), tau) + 1, 
#       floord(T + Uj - 1, tau)), 
#       c0 + floord(Uj - 5, tau) + 2); c1 += 1)
#
#       for (int c2 = max(max(max(max(max(max(
#         c0 - 2 * c1 + floord(-Ui + Lj + 1, tau), 
#         -c1 + floord(-2 * Ui - Uj + tau * c0 + tau * c1 - tau-3, tau*2) + 1),
#         c1 + floord(-Ui - 2 * Uj + 3, tau)), 
#         floord(-Ui - Uj + 3, tau)), 
#         c0 - c1 + floord(-Ui - (tau/3) * c0 + ((tau/3)+1), tau)), 
#         c0 - c1 + floord(-T - Ui, tau) + 1), 
#         -c1 + floord(-Ui + 4, tau) - 1); 
#         c2 <= min(min(min(min(min(min(
#         c0 - 2 * c1 + floord(-Li + Uj - 2, tau) + 1, 
#         c0 - c1 + floord(-Li - 2, tau) + 1), 
#         c0 - c1 + floord(-Li - (tau/3) * c0 - ((tau/3)+1), tau) + 1), 
#         floord(T - Li - Lj, tau)), 
#         -c1 + floord(2 * T - Li, tau)), 
#         c1 + floord(-Li - 2 * Lj - 1, tau) + 1), 
#         -c1 + floord(-2 * Li - Lj + tau * c0 + tau * c1 + (tau-1), tau*2)); 
#         c2 += 1)
#
#           for (int c3 = 1; c3 <= min(T-toffset,subset_s); c3 += 1)
# gonna let tau=145, BROKEN: 145 is not divisible by 3.  Don't know
# what I was thinking here.  Not important though.
S := [T,Lj,Uj,Li,Ui] -> { [c0,c1] : c0 > 0 &&
    145*c1 >= Lj + 45*c0 + 45 &&
    145*c1 >= 145*c0 -2*T + Lj -1 +145 &&
    145*c1 >= Lj+1 &&
    145*c1 <= Uj + 45*c0 - 47 +145 &&
    145*c1 <= T + Uj - 1 &&
    145*c1 <= 145*c0 + Uj-5 + 2*145
    };
S;
# As Dave W. suspected, the above set S is not empty.
#S := [T,Lj,Uj,Li,Ui] -> { [c0,c1,c2] : c0 > 0 &&
#    145*c1 >= Lj + 45*c0 + 45 &&
#    145*c1 >= 145*c0 -2*T + Lj -1 +145 &&
#    145*c1 >= Lj+1 &&
#    145*c1 <= Uj + 45*c0 - 47 +145 &&
#    145*c1 <= T + Uj - 1 &&
#    145*c1 <= 145*c0 + Uj-5 + 2*145 &&
#    145*c2 >= 145*c0 -2*145*c1 -Ui + Lj + 1 &&
#    2*145*c2 >= -2*145*c1 + 2*145 -2*Ui - Uj +145*c0 + 145*c1 - 145 - 3 &&
#    145*c2 >= 145*c1 - Ui -2*Uj + 3 &&
#    145*c2 >= -Ui - Uj + 3 &&
#    145*c2 >= 145*c0 - 145*c1
#    };
S;

# The above is too much work to do by hand.  Let's start from the beginning.

# We represent the iteration space for the loop in iscc as follows:
# Note that t will go from 1 to s=(tau/3)-2 to avoid pointy bits.
# TAU=33
Islab := [T, Li, Ui, Lj, Uj] -> { computation[t,i,j] : 
                              1<=t<9 && Li<= i < Ui && Lj <= j < Uj };
Islab;
T_diamond_with_skew := {computation[t,i,j]  -> [thyme,k1, k2,  t, i, j] :
    exists k0,r0,r1,r2: 0 <=r0<33 && 0<=r1<33 && 0<=r2<33
    && thyme=k0+k1+k2
    && 33*k0+r0 = t+i && 33*k1+r1 = t+j && 33*k2+r2 = t-i-j };

T_diamond_with_skew*Islab;

codegen (T_diamond_with_skew * Islab) assuming [Li,Ui,Lj,Uj] -> { : Li<Ui && Lj<Uj};
# Bingo!


# TAU=33, s=(TAU/3)-2 = 9 
Islab9 := [T, Li, Ui, Lj, Uj] -> { computation[t,i,j] : 
                              1<=t<9 && Li<= i < Ui && Lj <= j < Uj };
Islab9;

# TAU=36, s=(TAU/3)-2 = 10 
Islab10 := [T, Li, Ui, Lj, Uj] -> { computation[t,i,j] : 
                              1<=t<10 && Li<= i < Ui && Lj <= j < Uj };
Islab10;

# TAU=156, s=(TAU/3)-2 = 50 
Islab50 := [T, Li, Ui, Lj, Uj] -> { computation[t,i,j] : 
                              1<=t<50 && Li<= i < Ui && Lj <= j < Uj };
Islab50;

# TAU=159, s=(TAU/3)-2 = 51 
Islab51 := [T, Li, Ui, Lj, Uj] -> { computation[t,i,j] : 
                              1<=t<51 && Li<= i < Ui && Lj <= j < Uj };
Islab51;


# TAU=156
T_diamond_with_skew := {computation[t,i,j]  -> [thyme,k1, k2,  t, i, j] :
    exists k0,r0,r1,r2: 0 <=r0<156 && 0<=r1<156 && 0<=r2<156
    && thyme=k0+k1+k2
    && 156*k0+r0 = t+i && 156*k1+r1 = t+j && 156*k2+r2 = t-i-j };

T_diamond_with_skew*Islab50;

codegen (T_diamond_with_skew * Islab50) assuming [Li,Ui,Lj,Uj] -> { : Li<Ui && Lj<Uj};

# Look at code for just one phase: c0 = -2, tau=156
T_diamond_with_skew := {computation[t,i,j]  -> [thyme,k1, k2,  t, i, j] :
    exists k0,r0,r1,r2: 0 <=r0<156 && 0<=r1<156 && 0<=r2<156
    && thyme=k0+k1+k2
    && thyme=-2
    && 156*k0+r0 = t+i && 156*k1+r1 = t+j && 156*k2+r2 = t-i-j };

T_diamond_with_skew*Islab50;

codegen (T_diamond_with_skew * Islab50) assuming [Li,Ui,Lj,Uj] -> { : Li<Ui && Lj<Uj};

# Look at code for just one phase: c0 = -2, tau=33
T_diamond_with_skew := {computation[t,i,j]  -> [thyme,k1, k2,  t, i, j] :
    exists k0,r0,r1,r2: 0 <=r0<33 && 0<=r1<33 && 0<=r2<33
    && thyme=k0+k1+k2
    && thyme=-2
    && 33*k0+r0 = t+i && 33*k1+r1 = t+j && 33*k2+r2 = t-i-j };

T_diamond_with_skew*Islab9;

codegen (T_diamond_with_skew * Islab9) assuming [Li,Ui,Lj,Uj] -> { : Li<Ui && Lj<Uj};

# Look at code for just one phase: c0 = -1, tau=33
T_diamond_with_skew := {computation[t,i,j]  -> [thyme,k1, k2,  t, i, j] :
    exists k0,r0,r1,r2: 0 <=r0<33 && 0<=r1<33 && 0<=r2<33
    && thyme=k0+k1+k2
    && thyme=-1
    && 33*k0+r0 = t+i && 33*k1+r1 = t+j && 33*k2+r2 = t-i-j };

T_diamond_with_skew*Islab9;

codegen (T_diamond_with_skew * Islab9) assuming [Li,Ui,Lj,Uj] -> { : Li<Ui && Lj<Uj};

# Look at code for just one phase: c0 = -1, tau=36
T_diamond_with_skew := {computation[t,i,j]  -> [thyme,k1, k2,  t, i, j] :
    exists k0,r0,r1,r2: 0 <=r0<36 && 0<=r1<36 && 0<=r2<36
    && thyme=k0+k1+k2
    && thyme=-1
    && 36*k0+r0 = t+i && 36*k1+r1 = t+j && 36*k2+r2 = t-i-j };

T_diamond_with_skew*Islab10;

codegen (T_diamond_with_skew * Islab10) assuming [Li,Ui,Lj,Uj] -> { : Li<Ui && Lj<Uj};


# Look at code for just one phase: c0 = -1, tau=156
T_diamond_with_skew := {computation[t,i,j]  -> [thyme,k1, k2,  t, i, j] :
    exists k0,r0,r1,r2: 0 <=r0<156 && 0<=r1<156 && 0<=r2<156
    && thyme=k0+k1+k2
    && thyme=-1
    && 156*k0+r0 = t+i && 156*k1+r1 = t+j && 156*k2+r2 = t-i-j };

T_diamond_with_skew*Islab50;

codegen (T_diamond_with_skew * Islab50) assuming [Li,Ui,Lj,Uj] -> { : Li<Ui && Lj<Uj};

# Look at code for just one phase: c0 = -1, tau=159
T_diamond_with_skew := {computation[t,i,j]  -> [thyme,k1, k2,  t, i, j] :
    exists k0,r0,r1,r2: 0 <=r0<159 && 0<=r1<159 && 0<=r2<159
    && thyme=k0+k1+k2
    && thyme=-1
    && 159*k0+r0 = t+i && 159*k1+r1 = t+j && 159*k2+r2 = t-i-j };

T_diamond_with_skew*Islab51;

codegen (T_diamond_with_skew * Islab51) assuming [Li,Ui,Lj,Uj] -> { : Li<Ui && Lj<Uj};

# Look at code for just one phase: c0 = 0, tau=36
T_diamond_with_skew := {computation[t,i,j]  -> [thyme,k1, k2,  t, i, j] :
    exists k0,r0,r1,r2: 0 <=r0<36 && 0<=r1<36 && 0<=r2<36
    && thyme=k0+k1+k2
    && thyme=0
    && 36*k0+r0 = t+i && 36*k1+r1 = t+j && 36*k2+r2 = t-i-j };

T_diamond_with_skew*Islab10;

codegen (T_diamond_with_skew * Islab10) assuming [Li,Ui,Lj,Uj] -> { : Li<Ui && Lj<Uj};


# Look at code for just one phase: c0 = 0, tau=156
T_diamond_with_skew := {computation[t,i,j]  -> [thyme,k1, k2,  t, i, j] :
    exists k0,r0,r1,r2: 0 <=r0<156 && 0<=r1<156 && 0<=r2<156
    && thyme=k0+k1+k2
    && thyme=0
    && 156*k0+r0 = t+i && 156*k1+r1 = t+j && 156*k2+r2 = t-i-j };

T_diamond_with_skew*Islab50;

codegen (T_diamond_with_skew * Islab50) assuming [Li,Ui,Lj,Uj] -> { : Li<Ui && Lj<Uj};


