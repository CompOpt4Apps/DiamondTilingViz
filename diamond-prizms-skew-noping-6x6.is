{
  for (c4 = 0; c4 < N; c4 += 1)
    for (c5 = 0; c5 < N; c5 += 1)
      do_init_pong(c4, c5);
  for (c4 = 0; c4 < N; c4 += 1) {
    do_edge_pong(c4, 0);
    if (c4 + 1 == N) {
      for (c5 = 1; c5 < N - 1; c5 += 1)
        do_edge_pong(N - 1, c5);
    } else if (c4 == 0)
      for (c5 = 1; c5 < N - 1; c5 += 1)
        do_edge_pong(0, c5);
    do_edge_pong(c4, N - 1);
  }
  startclock();
  for (c1 = 0; c1 <= (T + N - 2) / 6; c1 += 1)
    for (c2 = max(max(-c1 - 1, c1 - (N + 3) / 3 + 1), -((N + 2) / 6)); c2 <= min(min(-c1 + T / 3, c1), (T - 1) / 6); c2 += 1)
      for (c3 = max(max(max(6 * c2 + 1, -N + 6 * c1 + 2), 3 * c1 + 3 * c2), 1); c3 <= min(min(min(3 * c1 + 3 * c2 + 5, 6 * c1 + 4), N + 6 * c2 + 3), T); c3 += 1)
        for (c4 = max(max(-6 * c2 + c3 - 5, 6 * c1 - c3), 1); c4 <= min(min(-6 * c2 + c3, N - 2), 6 * c1 - c3 + 5); c4 += 1)
          for (c5 = 1; c5 < N - 1; c5 += 1)
            calc(c3, c4, c5);
}
