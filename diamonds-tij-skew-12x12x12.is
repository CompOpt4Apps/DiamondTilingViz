{
  for (c6 = 0; c6 < N; c6 += 1)
    for (c7 = 0; c7 < N; c7 += 1)
      do_init_pong(c6, c7);
  for (c6 = 0; c6 < N; c6 += 1) {
    do_edge_pong(c6, 0);
    if (c6 + 1 == N)
      for (c7 = 1; c7 < N - 1; c7 += 1)
        do_edge_pong(N - 1, c7);
    if (c6 == 0)
      for (c7 = 1; c7 < N - 1; c7 += 1)
        do_edge_pong(0, c7);
    if (N >= 2)
      do_edge_pong(c6, N - 1);
  }
  startclock();
  if (N >= 3 && T >= 1) {
    if ((N - 3) % 6 == 0 && N <= 9)
      calc_ping(1, N - 2, N - 2);
    if (T == 1) {
      for (c1 = max(-2, floord(-N + 3, 6)); c1 <= min(floord(N - 1, 6) - 1, 0); c1 += 1)
        for (c2 = max(c1 - (N + 11) / 12 + 2, 0); c2 <= min(c1 + (N + 6) / 12 + 1, (N - 1) / 12); c2 += 1)
          for (c3 = max(max(c1 - c2 - (N + 11) / 12 + 1, -c2 - (N + 6) / 12 - 1), -((N + 3) / 6)); c3 <= min(c1 - c2, -1); c3 += 1)
            for (c6 = max(max(max(12 * c1 - 12 * c2 - 12 * c3 - 1, -12 * c2 - 12 * c3 - 20), -N - 12 * c3 - 8), 1); c6 <= min(min(min(N - 2, -12 * c3), 12 * c1 - 12 * c2 - 12 * c3 + 10), -12 * c2 - 12 * c3 + 2); c6 += 1)
              for (c7 = max(max(1, -12 * c3 - c6 - 10), 12 * c2 - 1); c7 <= min(min(N - 2, -12 * c3 - c6 + 1), 12 * c2 + 10); c7 += 1)
                calc_ping(1, c6, c7);
    } else
      for (c1 = max(-2, -((N + 2) / 6)); c1 <= min(T / 4, (3 * T + N + 6) / 12 - 1); c1 += 1)
        for (c2 = max(max(max(max(0, floord(c1 + 1, 3)), floord(-T - N + 12 * c1 + 1, 24) + 1), c1 - (T + 5) / 6 + 1), floord(-N + 12 * c1 - 9, 36) + 1); c2 <= min(min(min((N + 3 * c1 + 2) / 9, (T + N - 2) / 12), c1 + (N + 6) / 12 + 1), (N + 4 * c1 + 5) / 12); c2 += 1)
          for (c3 = max(max(max(max(max(c1 - c2 - (T + N + 10) / 12 + 1, -c2 - (N + 6) / 12 - 1), c1 - 2 * c2 - (N + 8) / 12), c1 - c2 - (N + 4 * c1 + 5) / 12), -((N + 3) / 6)), -c2 + floord(-N + 4 * c1 + 4 * c2 - 2, 8) + 1); c3 <= min(min(min(min(min(c1 - c2 + floord(-c1 + 1, 3), c1 - c2), c2), -c2 + (T - 1) / 6), c1 - 2 * c2 + floord(N - 4, 12) + 1), floord(T - 3 * c2 - 2, 9)); c3 += 1) {
            for (c4 = max(max(max(max(max(max(4 * c1 - 1, 6 * c2 + 6 * c3 + 1), 6 * c1 - 6 * c2 + 1), 12 * c3 + 1), -((N + 1) % 2) - N + 12 * c2 + 2), -((N + 1) % 2) - N + 12 * c1 - 12 * c2 - 12 * c3 + 2), 1); c4 <= min(min(min(min(min(min(4 * c1 + 10, 12 * c1 - 12 * c2 - 12 * c3 + 9), 12 * c2 + 9), 2 * N + 12 * c3 + 6), T - 1), 6 * c1 - 6 * c2 + floord(N, 2) + 9), 6 * c2 + 6 * c3 + floord(N, 2) + 9); c4 += 2) {
              if (c4 >= 12 * c3 + 3 && c4 >= 4 * c1 + 1)
                for (c6 = max(max(max(1, -12 * c2 - 12 * c3 + 2 * c4 - 22), -N - 12 * c3 + c4 - 9), 12 * c1 - 12 * c2 - 12 * c3 - c4); c6 <= min(min(min(-12 * c3 + c4 - 1, N - 2), 12 * c1 - 12 * c2 - 12 * c3 - c4 + 11), -12 * c2 - 12 * c3 + 2 * c4); c6 += 1)
                  for (c7 = max(max(12 * c2 - c4, 1), -12 * c3 + c4 - c6 - 11); c7 <= min(min(N - 2, 12 * c2 - c4 + 11), -12 * c3 + c4 - c6); c7 += 1)
                    calc_ping(c4, c6, c7);
              for (c6 = max(max(max(12 * c1 - 12 * c2 - 12 * c3 - c4 - 1, 1), -12 * c2 - 12 * c3 + 2 * c4 - 20), -N - 12 * c3 + c4 - 8); c6 <= min(min(min(-12 * c2 - 12 * c3 + 2 * c4 + 2, N - 2), -12 * c3 + c4), 12 * c1 - 12 * c2 - 12 * c3 - c4 + 10); c6 += 1)
                for (c7 = max(max(-12 * c3 + c4 - c6 - 10, 12 * c2 - c4 - 1), 1); c7 <= min(min(12 * c2 - c4 + 10, -12 * c3 + c4 - c6 + 1), N - 2); c7 += 1)
                  calc_pong(c4 + 1, c6, c7);
            }
            if (T >= 2 * ((N + 12 * c2 + 12 * c3 + 20) / 4) + 2 && 8 * c1 >= N + 12 * c2 + 12 * c3 + 1 && 12 * c2 >= N + 12 * c3 + 1 && N + 4 * c3 >= 4 * c2 + 3) {
              for (c6 = max(12 * c1 - 12 * c2 - 12 * c3 - 2 * ((N + 12 * c2 + 12 * c3 + 20) / 4) - 1, -((N + 12 * c2 + 12 * c3 + 20) % 4) + N); c6 < N - 1; c6 += 1)
                for (c7 = -12 * c3 - c6 + 2 * ((N + 12 * c2 + 12 * c3 + 20) / 4) - 10; c7 <= 12 * c2 - 2 * ((N + 12 * c2 + 12 * c3 + 20) / 4) + 10; c7 += 1)
                  calc_ping(6 * c2 + 6 * c3 + 2 * (N / 4) + 11, c6, c7);
            } else if (2 * c2 + c3 == c1 && 12 * c2 + 1 >= N + 4 * c1 && T + 24 * c2 >= 2 * N + 12 * c1 + 8)
              calc_ping(2 * N + 12 * c1 - 24 * c2 + 7, N - 2, N - 2);
            if ((T - 1) % 2 == 0 && N + 12 * c1 + 18 >= 2 * T + 12 * c2 && 4 * c1 + 9 >= T) {
              for (c6 = max(max(max(2 * T - 12 * c2 - 12 * c3 - 22, T - N - 12 * c3 - 9), -T + 12 * c1 - 12 * c2 - 12 * c3), 1); c6 <= min(min(min(N - 2, -T + 12 * c1 - 12 * c2 - 12 * c3 + 11), 2 * T - 12 * c2 - 12 * c3), T - 12 * c3 - 1); c6 += 1)
                for (c7 = max(max(T - 12 * c3 - c6 - 11, -T + 12 * c2), 1); c7 <= min(min(-T + 12 * c2 + 11, T - 12 * c3 - c6), N - 2); c7 += 1)
                  calc_ping(T, c6, c7);
            } else if (T >= 2 * ((N + 12 * c1 - 12 * c2 + 20) / 4) + 1 && N + 4 * c2 + 8 * c3 >= 4 * c1 + 2 && 12 * c2 >= N + 4 * c1 + 1 && 12 * c1 >= N + 12 * c2 + 24 * c3 + 1) {
              for (c6 = -N - 12 * c3 + 2 * ((N + 12 * c1 - 12 * c2 + 20) / 4) - 8; c6 <= 12 * c1 - 12 * c2 - 12 * c3 - 2 * ((N + 12 * c1 - 12 * c2 + 20) / 4) + 10; c6 += 1)
                for (c7 = max(-12 * c3 - c6 + 2 * ((N + 12 * c1 - 12 * c2 + 20) / 4) - 10, 12 * c2 - 2 * ((N + 12 * c1 - 12 * c2 + 20) / 4) - 1); c7 < N - 1; c7 += 1)
                  calc_ping(6 * c1 - 6 * c2 + 2 * (N / 4) + 11, c6, c7);
            } else if (N + 12 * c2 + 12 * c3 >= 8 * c1 + 2 && T >= 4 * c1 + 11 && 3 * c2 >= c1 + 1 && N + 4 * c1 >= 12 * c2 + 2 && 2 * c1 >= 3 * c2 + 3 * c3 + 1)
              calc_ping(4 * c1 + 11, 8 * c1 - 12 * c2 - 12 * c3, -4 * c1 + 12 * c2);
          }
  }
}
