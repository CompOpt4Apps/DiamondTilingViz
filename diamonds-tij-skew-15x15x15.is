{
  for (c6 = 0; c6 < N; c6 += 1)
    for (c7 = 0; c7 < N; c7 += 1)
      do_init_pong(c6, c7);
  for (c6 = 0; c6 < N; c6 += 1) {
    do_edge_pong(c6, 0);
    if (c6 + 1 == N)
      for (c7 = 1; c7 < N - 1; c7 += 1)
        do_edge_pong(N - 1, c7);
    if (c6 == 0)
      for (c7 = 1; c7 < N - 1; c7 += 1)
        do_edge_pong(0, c7);
    if (N >= 2)
      do_edge_pong(c6, N - 1);
  }
  startclock();
  if (N >= 3 && T >= 1)
    for (c1 = max(-2, -((2 * N + 9) / 15)); c1 <= T / 5; c1 += 1)
      for (c2 = max(max(max(max(floord(-T - N + 15 * c1 + 1, 30) + 1, c1 - (2 * T + 14) / 15 + 1), 0), floord(-N + 15 * c1 - 12, 45) + 1), floord(c1 + 1, 3)); c2 <= min(min(min((N + 5 * c1 + 7) / 15, (T + N - 2) / 15), c1 + floord(N - 6, 15) + 2), (4 * N + 15 * c1 + 17) / 45); c2 += 1)
        for (c3 = max(max(max(max(max(c1 - c2 - (T + N + 13) / 15 + 1, -c2 - (N + 9) / 15 - 1), c1 - 2 * c2 - (N + 11) / 15), -((2 * N + 9) / 15)), c1 - c2 - (N + 5 * c1 + 7) / 15), -c2 + floord(-N + 5 * c1 + 5 * c2 - 3, 10) + 1); c3 <= min(min(min(min(min(-c2 + floord(c1 + c2, 2), -c2 + (2 * T - 1) / 15), c1 - 2 * c2 + floord(N - 4, 15) + 1), floord(T - 2, 15)), c1 - c2 + floord(-c1 + 1, 3)), c1 - c2); c3 += 1) {
          for (c4 = max(max(max(max(max(max(6 * c2 + 6 * c3 + 2 * floord(3 * c2 + 3 * c3, 4) + 1, 4 * c1 + 2 * floord(c1 + 1, 2) - 1), 6 * c1 - 8 * c2 + 2 * floord(3 * c1 + c2, 4) + 1), -2 * N + 14 * c2 + 2 * floord(N + c2 + 1, 2) + 1), -2 * N + 14 * c1 - 16 * c2 - 16 * c3 + 2 * floord(N + c1 + c2 + c3 + 1, 2) + 1), 1), 14 * c3 + 2 * floord(c3 + 1, 2) + 1); c4 <= min(min(min(min(min(min(15 * c1 - 15 * c2 - 15 * c3 + 12, 15 * c2 + 12), 2 * N + 15 * c3 + 9), T - 1), 7 * c1 - 8 * c2 + floord(N + c1 + c2, 2) + 12), 7 * c2 + 7 * c3 + floord(N + c2 + c3, 2) + 12), 5 * c1 + 13); c4 += 2) {
            for (c6 = max(max(max(1, -15 * c2 - 15 * c3 + 2 * c4 - 28), -N - 15 * c3 + c4 - 12), 15 * c1 - 15 * c2 - 15 * c3 - c4); c6 <= min(min(min(-15 * c3 + c4 - 1, N - 2), 15 * c1 - 15 * c2 - 15 * c3 - c4 + 14), -15 * c2 - 15 * c3 + 2 * c4); c6 += 1)
              for (c7 = max(max(15 * c2 - c4, 1), -15 * c3 + c4 - c6 - 14); c7 <= min(min(-15 * c3 + c4 - c6, N - 2), 15 * c2 - c4 + 14); c7 += 1)
                calc_ping(c4, c6, c7);
            for (c6 = max(max(max(15 * c1 - 15 * c2 - 15 * c3 - c4 - 1, -15 * c2 - 15 * c3 + 2 * c4 - 26), 1), -N - 15 * c3 + c4 - 11); c6 <= min(min(min(15 * c1 - 15 * c2 - 15 * c3 - c4 + 13, -15 * c3 + c4), N - 2), -15 * c2 - 15 * c3 + 2 * c4 + 2); c6 += 1)
              for (c7 = max(max(-15 * c3 + c4 - c6 - 13, 15 * c2 - c4 - 1), 1); c7 <= min(min(-15 * c3 + c4 - c6 + 1, N - 2), 15 * c2 - c4 + 13); c7 += 1)
                calc_pong(c4 + 1, c6, c7);
          }
          if (2 * N + 15 * c3 + 8 >= 2 * ((N + 15 * c2 + 15 * c3 + 26) / 4) && 15 * c2 + 11 >= 2 * ((N + 15 * c2 + 15 * c3 + 26) / 4) && 5 * c1 + 12 >= 2 * ((N + 15 * c2 + 15 * c3 + 26) / 4) && T >= 2 * ((N + 15 * c2 + 15 * c3 + 26) / 4) + 2) {
            for (c6 = max(15 * c1 - 15 * c2 - 15 * c3 - 2 * ((N + 15 * c2 + 15 * c3 + 26) / 4) - 1, -((N + 15 * c2 + 15 * c3 + 26) % 4) + N); c6 < N - 1; c6 += 1)
              for (c7 = -15 * c3 - c6 + 2 * ((N + 15 * c2 + 15 * c3 + 26) / 4) - 13; c7 <= 15 * c2 - 2 * ((N + 15 * c2 + 15 * c3 + 26) / 4) + 13; c7 += 1)
                calc_ping(8 * c2 + 8 * c3 + 2 * floord(N - c2 - c3, 4) + 13, c6, c7);
          } else if (2 * c2 + 2 * floord(c1 - 2 * c2 - 1, 2) + 1 == c1 && 2 * c2 + c3 == c1 && 15 * c2 + 1 >= N + 5 * c1 && T + 30 * c2 >= 2 * N + 15 * c1 + 11)
            calc_ping(2 * N + 15 * c1 - 30 * c2 + 10, N - 2, N - 2);
          if ((T - 1) % 2 == 0 && 5 * c1 + 13 >= T && 15 * c1 + 12 >= T + 15 * c2 + 15 * c3 && N + 15 * c1 + 24 >= 2 * T + 15 * c2 && 15 * c2 + 12 >= T) {
            for (c6 = max(max(max(2 * T - 15 * c2 - 15 * c3 - 28, T - N - 15 * c3 - 12), -T + 15 * c1 - 15 * c2 - 15 * c3), 1); c6 <= min(min(min(N - 2, -T + 15 * c1 - 15 * c2 - 15 * c3 + 14), 2 * T - 15 * c2 - 15 * c3), T - 15 * c3 - 1); c6 += 1)
              for (c7 = max(max(T - 15 * c3 - c6 - 14, -T + 15 * c2), 1); c7 <= min(min(N - 2, T - 15 * c3 - c6), -T + 15 * c2 + 14); c7 += 1)
                calc_ping(T, c6, c7);
          } else {
            if (c2 % 2 == 0 && T >= 15 * c2 + 13 && c1 >= 2 * c2 + c3 + 1) {
              for (c6 = max(15 * c1 - 30 * c2 - 15 * c3 - 13, 15 * c2 - 15 * c3 - 2); c6 <= min(min(15 * c1 - 30 * c2 - 15 * c3 + 1, N - 2), 15 * c2 - 15 * c3 + 12); c6 += 1)
                calc_ping(15 * c2 + 13, c6, 1);
            } else if (15 * c1 + 11 >= 15 * c2 + 15 * c3 + 2 * ((N + 15 * c1 - 15 * c2 + 26) / 4) && 2 * N + 15 * c3 + 9 >= 2 * ((N + 15 * c1 - 15 * c2 + 26) / 4) && 5 * c1 + 12 >= 2 * ((N + 15 * c1 - 15 * c2 + 26) / 4) && T >= 2 * ((N + 15 * c1 - 15 * c2 + 26) / 4) + 1)
              for (c6 = -N - 15 * c3 + 2 * ((N + 15 * c1 - 15 * c2 + 26) / 4) - 11; c6 <= 15 * c1 - 15 * c2 - 15 * c3 - 2 * ((N + 15 * c1 - 15 * c2 + 26) / 4) + 13; c6 += 1)
                for (c7 = max(-15 * c3 - c6 + 2 * ((N + 15 * c1 - 15 * c2 + 26) / 4) - 13, 15 * c2 - 2 * ((N + 15 * c1 - 15 * c2 + 26) / 4) - 1); c7 < N - 1; c7 += 1)
                  calc_ping(8 * c1 - 8 * c2 + 2 * floord(N - c1 + c2, 4) + 13, c6, c7);
            if (2 * floord(c1 - 1, 2) + 1 == c1 && 2 * c1 >= 3 * c2 + 3 * c3 + 1 && N + 15 * c2 + 15 * c3 >= 10 * c1 + 2 && T >= 5 * c1 + 14 && 3 * c2 >= c1 + 1 && N + 5 * c1 >= 15 * c2 + 2)
              calc_ping(5 * c1 + 14, 10 * c1 - 15 * c2 - 15 * c3, -5 * c1 + 15 * c2);
            if ((c1 + c2 - c3 + 1) % 2 == 1 && T + 15 * c2 + 15 * c3 >= 15 * c1 + 13)
              for (c7 = max(max(1, -15 * c1 + 30 * c2 + 15 * c3 - 13), 15 * c1 - 15 * c2 - 30 * c3 - 2); c7 <= min(min(N - 2, 15 * c1 - 15 * c2 - 30 * c3 + 12), -15 * c1 + 30 * c2 + 15 * c3 + 1); c7 += 1)
                calc_ping(15 * c1 - 15 * c2 - 15 * c3 + 13, 1, c7);
          }
        }
}
