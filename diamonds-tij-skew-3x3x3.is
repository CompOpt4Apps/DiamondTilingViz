{
  for (c6 = 0; c6 < N; c6 += 1)
    for (c7 = 0; c7 < N; c7 += 1)
      do_init_pong(c6, c7);
  for (c6 = 0; c6 < N; c6 += 1) {
    do_edge_pong(c6, 0);
    if (c6 + 1 == N)
      for (c7 = 1; c7 < N - 1; c7 += 1)
        do_edge_pong(N - 1, c7);
    if (c6 == 0)
      for (c7 = 1; c7 < N - 1; c7 += 1)
        do_edge_pong(0, c7);
    if (N >= 2)
      do_edge_pong(c6, N - 1);
  }
  startclock();
  if (T >= 1)
    for (c1 = -1; c1 <= T; c1 += 1) {
      if (N + 3 * c1 >= 2)
        for (c3 = max(floord(-N - 1, 3) + 1, c1 + floord(-N, 3) + 1); c3 < 0; c3 += 1)
          for (c6 = max(-3 * c3 - 2, 3 * c1 - 3 * c3 - 1); c6 <= min(min(N - 2, 3 * c1 - 3 * c3 + 1), -3 * c3); c6 += 1)
            calc_ping(1, c6, 1);
      if (c1 + 1 == 0 && T >= 2) {
        for (c2 = 1; c2 < floord(N + 1, 3) - 1; c2 += 1)
          for (c3 = -c2 - (N + 3) / 3 + 1; c3 < -c2; c3 += 1)
            calc_ping(1, -3 * c2 - 3 * c3 - 2, 3 * c2 + 1);
      } else if (T == 1) {
        for (c2 = 1; c2 <= min(floord(N - 1, 3), c1 + floord(N + 1, 3) - 1); c2 += 1)
          for (c3 = max(c1 - c2 - (N + 2) / 3 + 1, -c2 - (N + 3) / 3 + 1); c3 <= min(c1 - c2, -c2); c3 += 1)
            for (c6 = max(max(3 * c1 - 3 * c2 - 3 * c3 - 1, 1), -3 * c2 - 3 * c3 - 2); c6 <= min(min(N - 2, -3 * c2 - 3 * c3 + 2), 3 * c1 - 3 * c2 - 3 * c3 + 1); c6 += 1)
              for (c7 = max(-3 * c3 - c6 - 1, 3 * c2 - 1); c7 <= min(min(-3 * c3 - c6 + 1, 3 * c2 + 1), N - 2); c7 += 1)
                calc_ping(1, c6, c7);
      } else
        for (c2 = max(max(max(1, floord(c1 - 1, 3) + 1), -T + c1 + T / 3 + 1), floord(-N + c1, 3) + 2); c2 <= min(min(min(c1 + floord(N + 1, 3) - 1, floord(T + N + 1, 3) - 1), floord(N + c1 - 1, 3)), N + c1 - 4); c2 += 1)
          for (c3 = max(max(c1 - c2 - (N + c1 + 2) / 3 + 1, c1 - c2 - (T + N + 1) / 3 + 1), -N - c2 + (N + c1 + c2 + 1) / 2 + 1); c3 <= min(min(T - c2 - (T + 3) / 3, -c2 + (c1 + c2 + 1) / 2 - 1), c1 - c2 - (c1 + 2) / 3); c3 += 1) {
            for (c4 = max(max(max(max(max(1, -((N + c2 + 1) % 2) - N + 3 * c2 + 2), 2 * floord(3 * c2 + 3 * c3, 4) + 1), -((c1 + 1) % 2) + c1), -2 * c2 + 2 * floord(3 * c1 + c2, 4) + 1), -((N + c1 + c2 + c3 + 1) % 2) - N + 3 * c1 - 3 * c2 - 3 * c3 + 2); c4 <= min(min(min(min(min(3 * c2, T - 1), c1 + 1), c1 - 2 * c2 + (N + c1 + c2) / 2), c2 + c3 + (N + c2 + c3) / 2), 3 * c1 - 3 * c2 - 3 * c3); c4 += 2) {
              if (3 * c2 + 2 * c4 >= 3 * c1 + 1)
                for (c6 = max(3 * c1 - 3 * c2 - 3 * c3 - c4, 1); c6 <= min(min(3 * c1 - 3 * c2 - 3 * c3 - c4 + 2, -3 * c2 - 3 * c3 + 2 * c4), N - 2); c6 += 1)
                  for (c7 = max(max(3 * c2 - c4, 1), -3 * c3 + c4 - c6 - 2); c7 <= min(min(N - 2, 3 * c2 - c4 + 2), -3 * c3 + c4 - c6); c7 += 1)
                    calc_ping(c4, c6, c7);
              for (c6 = max(max(max(-N - 3 * c3 + c4 + 1, 1), -3 * c2 - 3 * c3 + 2 * c4 - 2), 3 * c1 - 3 * c2 - 3 * c3 - c4 - 1); c6 <= min(min(min(-3 * c3 + c4, -3 * c2 - 3 * c3 + 2 * c4 + 2), 3 * c1 - 3 * c2 - 3 * c3 - c4 + 1), N - 2); c6 += 1)
                for (c7 = max(max(-3 * c3 + c4 - c6 - 1, 3 * c2 - c4 - 1), 1); c7 <= min(min(-3 * c3 + c4 - c6 + 1, N - 2), 3 * c2 - c4 + 1); c7 += 1)
                  calc_pong(c4 + 1, c6, c7);
            }
            if (c1 % 2 == 0 && N + 3 * c2 + 3 * c3 == 2 * c1 + 1 && T >= c1 + 2 && 3 * c2 >= c1 + 1) {
              for (c7 = -c1 + 3 * c2; c7 <= -c1 + 3 * c2 + 1; c7 += 1)
                calc_ping(c1 + 1, N - 2, c7);
            } else if ((T - 1) % 2 == 0 && 3 * c1 >= T + 3 * c2 + 3 * c3 && 3 * c2 >= T && N + 3 * c1 >= 2 * T + 3 * c2 && c1 + 1 >= T) {
              for (c6 = max(1, -T + 3 * c1 - 3 * c2 - 3 * c3); c6 <= min(min(N - 2, -T + 3 * c1 - 3 * c2 - 3 * c3 + 2), 2 * T - 3 * c2 - 3 * c3); c6 += 1)
                for (c7 = max(max(T - 3 * c3 - c6 - 2, -T + 3 * c2), 1); c7 <= min(min(-T + 3 * c2 + 2, T - 3 * c3 - c6), N - 2); c7 += 1)
                  calc_ping(T, c6, c7);
            } else if (c1 % 6 == 0 && 3 * c2 == c1) {
              for (c6 = c1 - 3 * c3 - 1; c6 <= min(N - 2, c1 - 3 * c3); c6 += 1)
                calc_ping(c1 + 1, c6, 1);
            } else if (c1 % 2 == 0 && 3 * c2 + 1 == N + c1 && c1 >= N + 3 * c3) {
              for (c6 = -N + c1 - 3 * c3 + 1; c6 <= -N + c1 - 3 * c3 + 2; c6 += 1)
                calc_ping(c1 + 1, c6, N - 2);
            } else if (2 * floord(c1 - 1, 2) + 1 == c1 && N + 3 * c2 + 3 * c3 >= 2 * c1 + 2 && T >= c1 + 2 && 2 * c1 >= 3 * c2 + 3 * c3 + 2 && N + c1 >= 3 * c2 + 2 && 3 * c2 >= c1 + 1)
              calc_ping(c1 + 2, 2 * c1 - 3 * c2 - 3 * c3, -c1 + 3 * c2);
            if ((c1 + c2 - c3 + 1) % 2 == 1 && T + 3 * c2 + 3 * c3 >= 3 * c1 + 1)
              for (c7 = max(3 * c1 - 3 * c2 - 6 * c3 - 2, -3 * c1 + 6 * c2 + 3 * c3 - 1); c7 <= min(min(-3 * c1 + 6 * c2 + 3 * c3 + 1, 3 * c1 - 3 * c2 - 6 * c3), N - 2); c7 += 1)
                calc_ping(3 * c1 - 3 * c2 - 3 * c3 + 1, 1, c7);
          }
      if (N + 2 * c1 >= 3 * floord(N + 3 * c1 + 1, 3) + 1)
        for (c3 = -2 * floord(N - 2, 3) - 1; c3 <= floord(-N + 1, 3); c3 += 1)
          for (c6 = max(-N - 3 * c3 + 1, 1); c6 <= min(-N - 3 * c3 + 2, N - 2); c6 += 1)
            if (((-3 * c3 - c6 - 2) % 3) + N + 3 * c3 + c6 >= 0 && ((-3 * c3 - c6 - 2) % 3) + N + 3 * c3 + c6 <= 2 && c1 + 1 >= (-3 * c3 - c6 - 2) % 3)
              calc_ping(1, c6, -(N % 3) + N + c1 - 1);
    }
}
