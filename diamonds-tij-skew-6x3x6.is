{
  for (c6 = 0; c6 < N; c6 += 1)
    for (c7 = 0; c7 < N; c7 += 1)
      do_init_pong(c6, c7);
  for (c6 = 0; c6 < N; c6 += 1) {
    do_edge_pong(c6, 0);
    if (c6 + 1 == N)
      for (c7 = 1; c7 < N - 1; c7 += 1)
        do_edge_pong(N - 1, c7);
    if (c6 == 0)
      for (c7 = 1; c7 < N - 1; c7 += 1)
        do_edge_pong(0, c7);
    if (N >= 2)
      do_edge_pong(c6, N - 1);
  }
  startclock();
  if (N >= 3 && T >= 1)
    for (c1 = -1; c1 <= T + floord(-2 * T + N - 2, 6); c1 += 1)
      for (c2 = max(max(max(c1 - (T + 2) / 3 + 1, (c1 + 1) / 2), -T + 2 * c1), floord(-N + 6 * c1 + 3, 12) + 1); c2 <= min(min(min(min((T + N + 1) / 3 - 1, (2 * N + 3 * c1 - 1) / 6), c1 + N / 6 + 1), 2 * c1 + 3), (N + 2 * c1 + 1) / 4); c2 += 1) {
        if (6 * c2 >= N + 6 * c1 + 5)
          for (c3 = 2 * c1 - 2 * c2 + 2; c3 <= c1 - c2 + (-2 * c1 + c2 + 1) / 6; c3 += 1)
            for (c6 = 4 * c1 - 5 * c2 - 6 * c3 + 1; c6 <= 6 * c1 - 6 * c2 - 6 * c3 + 4; c6 += 1)
              calc_ping(1, c6, -4 * c1 + 5 * c2 - 5);
        if (T >= 2 && 2 * c1 + 2 >= c2 && c2 >= 1) {
          if (((N + 3 * c2 + 3) % 6) + 2 * c2 >= 4 * c1 + 3 && (N + 3 * c2 + 3) % 6 <= 1)
            for (c6 = max(N - 3, N + 6 * c1 - 3 * c2 + 1); c6 < N - 1; c6 += 1)
              for (c7 = -((-6 * c1 + 6 * c2 + c6 + 1) % 6) - 6 * c1 + 6 * c2 - 3; c7 <= 3 * c2 + 1; c7 += 1)
                calc_ping(1, c6, c7);
          if (N + 6 * c1 + 4 >= 6 * c2)
            for (c3 = max(max(max(max(-c2 + floord(-N + 3 * c2 - 2, 6) + 1, c1 - c2 - (N + 2 * c1 - c2 + 6) / 6 + 1), -N + (N + c2) / 2 + 1), c1 - 2 * c2 + floord(-N + 3 * c2, 6) + 1), c1 - c2 - (T + N + 4) / 6 + 1); c3 <= min(min(min(c1 - 2 * c2 + (N + 3 * c2 + 2) / 6, c1 - c2 - (2 * c1 - c2 + 3) / 6), -c2 + (2 * T + 3 * c2 - 1) / 6), (c2 + 1) / 2 - 1); c3 += 1) {
              for (c4 = max(max(max(max(max(-((N + 1) % 2) - N + 6 * c1 - 6 * c2 - 6 * c3 + 2, 2 * c3 + 2 * floord(3 * c2 + 2 * c3, 4) + 1), -((c2 + 1) % 2) + 2 * c1 - c2), 1), 2 * c1 - 4 * c2 + 2 * floord(c1 + c2, 2) + 1), -((N + c2 + 1) % 2) - N + 3 * c2 + 2); c4 <= min(min(min(min(min(3 * c2, T - 1), 3 * c1 - 3 * c2 + N / 2 + 3), c2 + 3 * c3 + (N + c2 + 1) / 2 + 1), 6 * c1 - 6 * c2 - 6 * c3 + 3), 2 * c1 - c2 + 3); c4 += 2) {
                if (3 * c2 + c4 >= 3 * c1 + 1)
                  for (c6 = max(max(max(-3 * c2 - 6 * c3 + 2 * c4 - 7, -N - 6 * c3 + c4 - 3), 6 * c1 - 6 * c2 - 6 * c3 - c4), 1); c6 <= min(min(6 * c1 - 6 * c2 - 6 * c3 - c4 + 5, -3 * c2 - 6 * c3 + 2 * c4), N - 2); c6 += 1)
                    for (c7 = max(max(3 * c2 - c4, 1), -6 * c3 + c4 - c6 - 5); c7 <= min(min(-6 * c3 + c4 - c6, N - 2), 3 * c2 - c4 + 2); c7 += 1)
                      calc_ping(c4, c6, c7);
                for (c6 = max(max(max(-3 * c2 - 6 * c3 + 2 * c4 - 5, 6 * c1 - 6 * c2 - 6 * c3 - c4 - 1), 1), -N - 6 * c3 + c4 - 2); c6 <= min(min(min(-3 * c2 - 6 * c3 + 2 * c4 + 2, 6 * c1 - 6 * c2 - 6 * c3 - c4 + 4), -6 * c3 + c4), N - 2); c6 += 1)
                  for (c7 = max(max(1, -6 * c3 + c4 - c6 - 4), 3 * c2 - c4 - 1); c7 <= min(min(N - 2, 3 * c2 - c4 + 1), -6 * c3 + c4 - c6 + 1); c7 += 1)
                    calc_pong(c4 + 1, c6, c7);
              }
              if (3 * c2 >= 2 * ((N + 3 * c2 + 6 * c3 + 5) / 4) + 1 && T >= 2 * ((N + 3 * c2 + 6 * c3 + 5) / 4) + 2 && N + 2 * c3 >= c2 + 2 && 2 * c1 + 2 >= c2 + 2 * ((N + 3 * c2 + 6 * c3 + 5) / 4)) {
                for (c6 = max(6 * c1 - 6 * c2 - 6 * c3 - 2 * ((N + 3 * c2 + 6 * c3 + 5) / 4) - 1, -((N + 3 * c2 + 6 * c3 + 5) % 4) + N); c6 < N - 1; c6 += 1)
                  for (c7 = -6 * c3 - c6 + 2 * ((N + 3 * c2 + 6 * c3 + 5) / 4) - 4; c7 <= 3 * c2 - 2 * ((N + 3 * c2 + 6 * c3 + 5) / 4) + 1; c7 += 1)
                    calc_ping(2 * c2 + 2 * c3 + 2 * ((N - c2 + 2 * c3 - 1) / 4) + 3, c6, c7);
              } else if (3 * N + 8 * c3 == 2 * c1 + 3 && 4 * c2 + 1 == N + 2 * c1 && 4 * T + N >= 6 * c1 + 17 && N >= 5) {
                calc_ping((-N + 6 * c1 + 13) / 4, N - 2, N - 2);
              } else if ((T - 1) % 2 == 0 && N + 6 * c1 + 6 >= 2 * T + 6 * c2 && 2 * c1 + 3 >= T + c2 && 3 * c2 >= T)
                for (c6 = max(max(max(2 * T - 3 * c2 - 6 * c3 - 7, T - N - 6 * c3 - 3), -T + 6 * c1 - 6 * c2 - 6 * c3), 1); c6 <= min(min(-T + 6 * c1 - 6 * c2 - 6 * c3 + 5, 2 * T - 3 * c2 - 6 * c3), N - 2); c6 += 1)
                  for (c7 = max(max(1, T - 6 * c3 - c6 - 5), -T + 3 * c2); c7 <= min(min(N - 2, -T + 3 * c2 + 2), T - 6 * c3 - c6); c7 += 1)
                    calc_ping(T, c6, c7);
              if (c2 % 2 == 0 && T >= 3 * c2 + 1)
                for (c6 = max(6 * c1 - 9 * c2 - 6 * c3 - 1, 3 * c2 - 6 * c3 - 5); c6 <= min(min(6 * c1 - 9 * c2 - 6 * c3 + 4, 3 * c2 - 6 * c3), N - 2); c6 += 1)
                  calc_ping(3 * c2 + 1, c6, 1);
              if ((N + 2 * c1 + 1) % 8 == 0 && 4 * c2 == N + 2 * c1 + 1) {
                for (c6 = (-5 * N + 6 * c1 - 24 * c3 - 1) / 4; c6 <= -N + c1 - 6 * c3 + floord(-N + 2 * c1 - 1, 4) + 1; c6 += 1)
                  calc_ping((-N + 6 * c1 + 11) / 4, c6, N - 2);
              } else if ((c2 - 1) % 2 == 0 && N + 5 * c2 + 6 * c3 >= 4 * c1 + 3 && T + c2 >= 2 * c1 + 4 && 2 * c2 >= c1 + 2 && N + 2 * c1 >= 4 * c2 && 4 * c1 >= 5 * c2 + 6 * c3 + 1)
                calc_ping(2 * c1 - c2 + 4, 4 * c1 - 5 * c2 - 6 * c3 + 1, -2 * c1 + 4 * c2 - 2);
            }
        } else if (c2 == 0) {
          for (c3 = max(c1 - (N + 5) / 6 + 1, -((N + 3) / 6)); c3 < 0; c3 += 1)
            for (c6 = max(-6 * c3 - 5, 6 * c1 - 6 * c3 - 1); c6 <= min(min(6 * c1 - 6 * c3 + 4, -6 * c3), N - 2); c6 += 1)
              calc_ping(1, c6, 1);
        } else if (c2 == 2 * c1 + 3 && T >= 2 && N >= 6 * c1 + 14) {
          for (c3 = -c1 - (N + 6) / 6 - 1; c3 < -c1 - 2; c3 += 1)
            calc_ping(1, -6 * c1 - 6 * c3 - 14, 6 * c1 + 10);
        } else if (T == 1 && N + 6 * c1 + 4 >= 6 * c2)
          for (c3 = max(c1 - c2 - (N + 5) / 6 + 1, -c2 - (N - 3 * c2 + 3) / 6); c3 <= min(c1 - c2, -c2 + c2 / 2); c3 += 1)
            for (c6 = max(max(max(6 * c1 - 6 * c2 - 6 * c3 - 1, 1), -3 * c2 - 6 * c3 - 5), -N - 6 * c3 - 2); c6 <= min(min(N - 2, 6 * c1 - 6 * c2 - 6 * c3 + 4), -3 * c2 - 6 * c3 + 2); c6 += 1)
              for (c7 = max(-6 * c3 - c6 - 4, 3 * c2 - 1); c7 <= min(min(N - 2, -6 * c3 - c6 + 1), 3 * c2 + 1); c7 += 1)
                calc_ping(1, c6, c7);
      }
}
