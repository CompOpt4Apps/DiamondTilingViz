{
  for (c6 = 0; c6 < N; c6 += 1)
    for (c7 = 0; c7 < N; c7 += 1)
      do_init_pong(c6, c7);
  for (c6 = 0; c6 < N; c6 += 1) {
    do_edge_pong(c6, 0);
    if (c6 + 1 == N)
      for (c7 = 1; c7 < N - 1; c7 += 1)
        do_edge_pong(N - 1, c7);
    if (c6 == 0)
      for (c7 = 1; c7 < N - 1; c7 += 1)
        do_edge_pong(0, c7);
    if (N >= 2)
      do_edge_pong(c6, N - 1);
  }
  startclock();
  if (T >= 1 && N >= 3)
    for (c1 = max(-N + (N + 1) / 3 + 1, -((N + 3) / 3)); c1 <= T - (T + 3) / 3; c1 += 1) {
      if (N + 6 * c1 + 6 * floord(-N - 6 * c1 - 7, 6) + 8 <= 0 && N + 2 * c1 >= 2 * floord(-N - 6 * c1 - 7, 6) && N + 6 * c1 + 7 <= 0)
        for (c3 = max(-N + (N - 1) / 3 + 2, 2 * c1 + 2); c3 <= min(2 * c1 + 3, 2 * c1 + N / 6 + 2); c3 += 1)
          for (c6 = max(max(-N - 3 * c3 + 1, N + 6 * c1 - 3 * c3 + 3), -6 * c1 + 3 * c3 - 5); c6 <= min(N - 2, 6 * c1 - 6 * c3 + 4); c6 += 1)
            if (((6 * c1 - 6 * c3 - c6 + 4) % 6) + 6 * c3 + c6 >= N + 12 * c1 + 11 && N + 12 * c1 + 16 >= ((6 * c1 - 6 * c3 - c6 + 4) % 6) + 6 * c3 + c6)
              for (c7 = -3 * c3 - c6 - 1; c7 <= -((6 * c1 - 6 * c3 - c6 + 4) % 6) + 6 * c1 - 6 * c3 - c6 + 8; c7 += 1)
                calc_ping(1, c6, c7);
      if (T >= 2) {
        for (c2 = max(max(max(max(floord(-T + 3 * c1, 6) + 1, -c1 - (N + 7) / 6), floord(c1 + 2, 4)), floord(-N + 4 * c1 - 1, 16) + 1), 0); c2 <= min(min(min(min(T - c1 - (T + 6) / 6, (2 * N + 3 * c1 + 3) / 6 - 1), (T + N - 2) / 6), (N + c1 - 1) / 4), (3 * N + 2 * c1 + 2) / 8 - 1); c2 += 1) {
          if (N + 6 * c1 + 6 * c2 + 5 == 0) {
            for (c7 = -N - 6 * c1 - 2; c7 < -N - 6 * c1; c7 += 1)
              calc_ping(1, N - 2, c7);
          } else if (6 * c2 + 3 == N && N + 3 * c1 == 0)
            calc_ping(1, N - 2, N - 2);
          for (c3 = max(max(max(max(max(max(max(2 * c1 - 6 * c2 - 2, -2 * c2 - (N + 1) / 3), -T + 2 * c1), c1 - c2 - (N + c1 + c2 + 5) / 5 + 1), -T + 2 * c1 - 2 * c2 + T / 3 + 1), c1 - c2 - (T + N + 4) / 6 + 1), -N + N / 3 + 2), c1 - c2 - (N + c1 - c2 + 1) / 3 + 1); c3 <= min(min(min(min(min(min(2 * c1 - 2 * c2 + (N + 1) / 3, N + 2 * c1 - 6 * c2), c1 - c2 + floord(-c1 + c2, 3)), (T + 1) / 3 - 1), T - 2 * c2 - (T + 3) / 3), c1 - c2 + floord(-c1 - c2 + 2, 5)), 2 * c1 + 2); c3 += 1) {
            for (c4 = max(max(max(max(max(max(-((N + 1) % 2) - N + 6 * c2 + 2, -((N + 1) % 2) - N + 6 * c1 - 6 * c2 - 6 * c3 + 2), 1), 2 * c3 + 2 * floord(c3 + 1, 2) + 1), 2 * c2 + 2 * floord(2 * c2 + 3 * c3, 4) + 1), 2 * c1 - 2 * c3 + 2 * floord(c3 + 1, 2) - 1), 2 * c1 - 4 * c2 - 2 * c3 + 2 * floord(2 * c1 + 2 * c2 + c3, 4) + 1); c4 <= min(min(min(min(min(min(T - 1, 2 * N + 3 * c3 - 3), 3 * c1 - 3 * c2 - 2 * c3 + (N + c3 + 1) / 2 + 1), 3 * c2 + c3 + (N + c3 + 1) / 2 + 1), 6 * c1 - 6 * c2 - 6 * c3 + 3), 2 * c1 - c3 + 3), 6 * c2 + 3); c4 += 2) {
              for (c6 = max(max(max(-6 * c2 - 3 * c3 + 2 * c4 - 7, -N - 3 * c3 + c4), 6 * c1 - 6 * c2 - 6 * c3 - c4), 1); c6 <= min(min(min(N - 2, 6 * c1 - 6 * c2 - 6 * c3 - c4 + 5), -6 * c2 - 3 * c3 + 2 * c4), -3 * c3 + c4 - 1); c6 += 1)
                for (c7 = max(max(1, -3 * c3 + c4 - c6 - 2), 6 * c2 - c4); c7 <= min(min(N - 2, 6 * c2 - c4 + 5), -3 * c3 + c4 - c6); c7 += 1)
                  calc_ping(c4, c6, c7);
              for (c6 = max(max(max(-N - 3 * c3 + c4 + 1, 1), -6 * c2 - 3 * c3 + 2 * c4 - 5), 6 * c1 - 6 * c2 - 6 * c3 - c4 - 1); c6 <= min(min(min(-3 * c3 + c4, N - 2), 6 * c1 - 6 * c2 - 6 * c3 - c4 + 4), -6 * c2 - 3 * c3 + 2 * c4 + 2); c6 += 1)
                for (c7 = max(max(-3 * c3 + c4 - c6 - 1, 6 * c2 - c4 - 1), 1); c7 <= min(min(-3 * c3 + c4 - c6 + 1, N - 2), 6 * c2 - c4 + 4); c7 += 1)
                  calc_pong(c4 + 1, c6, c7);
            }
            if (6 * c2 + 2 >= N + 3 * c3 && 2 * N + 3 * c3 >= 2 * ((N + 6 * c2 + 3 * c3 + 5) / 4) + 4 && T >= 2 * ((N + 6 * c2 + 3 * c3 + 5) / 4) + 2 && 2 * c1 + 2 >= c3 + 2 * ((N + 6 * c2 + 3 * c3 + 5) / 4)) {
              for (c6 = max(6 * c1 - 6 * c2 - 6 * c3 - 2 * ((N + 6 * c2 + 3 * c3 + 5) / 4) - 1, -((N + 6 * c2 + 3 * c3 + 5) % 4) + N); c6 < N - 1; c6 += 1)
                for (c7 = -3 * c3 - c6 + 2 * ((N + 6 * c2 + 3 * c3 + 5) / 4) - 1; c7 <= 6 * c2 - 2 * ((N + 6 * c2 + 3 * c3 + 5) / 4) + 4; c7 += 1)
                  calc_ping(2 * c2 + 2 * c3 + 2 * ((N + 2 * c2 - c3 - 1) / 4) + 3, c6, c7);
            } else if (N + 4 * floord(-N + c1, 4) == c1 && N + 2 * c3 == c1 + 2 && 4 * c2 + 2 == N + c1 && 2 * T >= N + 3 * c1 + 4) {
              calc_ping((N + 3 * c1 + 2) / 2, N - 2, N - 2);
            } else if ((T - 1) % 2 == 0 && 2 * c1 + 3 >= T + c3 && N + 6 * c1 + 3 >= 2 * T + 6 * c2 + 3 * c3) {
              for (c6 = max(max(max(-T + 6 * c1 - 6 * c2 - 6 * c3, T - N - 3 * c3), 1), 2 * T - 6 * c2 - 3 * c3 - 7); c6 <= min(min(min(-T + 6 * c1 - 6 * c2 - 6 * c3 + 5, 2 * T - 6 * c2 - 3 * c3), T - 3 * c3 - 1), N - 2); c6 += 1)
                for (c7 = max(max(-T + 6 * c2, 1), T - 3 * c3 - c6 - 2); c7 <= min(min(T - 3 * c3 - c6, -T + 6 * c2 + 5), N - 2); c7 += 1)
                  calc_ping(T, c6, c7);
            } else if (2 * N + 3 * c3 >= 2 * ((N + 6 * c1 - 6 * c2 - 3 * c3 + 5) / 4) + 3 && 6 * c1 + 2 >= N + 6 * c2 + 9 * c3 && 2 * c1 + 2 >= c3 + 2 * ((N + 6 * c1 - 6 * c2 - 3 * c3 + 5) / 4) && T >= 2 * ((N + 6 * c1 - 6 * c2 - 3 * c3 + 5) / 4) + 1) {
              for (c6 = -N - 3 * c3 + 2 * ((N + 6 * c1 - 6 * c2 - 3 * c3 + 5) / 4) + 1; c6 <= 6 * c1 - 6 * c2 - 6 * c3 - 2 * ((N + 6 * c1 - 6 * c2 - 3 * c3 + 5) / 4) + 4; c6 += 1)
                for (c7 = max(-3 * c3 - c6 + 2 * ((N + 6 * c1 - 6 * c2 - 3 * c3 + 5) / 4) - 1, 6 * c2 - 2 * ((N + 6 * c1 - 6 * c2 - 3 * c3 + 5) / 4) - 1); c7 < N - 1; c7 += 1)
                  calc_ping(2 * c1 - 4 * c2 - 2 * c3 + 2 * ((N + 2 * c1 + 2 * c2 + c3 - 1) / 4) + 3, c6, c7);
            } else if (2 * floord(c3 - 1, 2) + 1 == c3 && N + 2 * c1 >= 6 * c2 + c3 + 3 && N + 6 * c2 + 5 * c3 >= 4 * c1 + 3 && T + c3 >= 2 * c1 + 4 && 4 * c1 >= 6 * c2 + 5 * c3 + 1 && 6 * c2 + c3 >= 2 * c1 + 1)
              calc_ping(2 * c1 - c3 + 4, 4 * c1 - 6 * c2 - 5 * c3 + 1, -2 * c1 + 6 * c2 + c3 + 1);
          }
          if (N >= 6 * c2 + 8 && c1 + c2 + 3 <= 0)
            calc_ping(1, -6 * c1 - 6 * c2 - 14, 6 * c2 + 4);
          if (4 * c1 + 1 >= 6 * c2 + 5 * floord(N + 6 * c1 - 6 * c2 + 4, 3) && N + 6 * c1 + 3 >= 6 * c2 + 3 * floord(N + 6 * c1 - 6 * c2 + 4, 3))
            for (c6 = max(-6 * c1 - 6 * c2 - 14, -2 * N - 6 * c1 + 6 * c2 - 2); c6 <= -2 * N - 6 * c1 + 6 * c2; c6 += 1)
              if (N + 6 * c1 + 4 >= 6 * c2 - 3 * ((-6 * c1 + 6 * c2 + c6 + 1) / 6) && 6 * c2 - 3 * ((-6 * c1 + 6 * c2 + c6 + 1) / 6) >= N + 6 * c1 + 2)
                for (c7 = max(6 * c2 - 1, -c6 + 3 * ((-6 * c1 + 6 * c2 + c6 + 1) / 6) - 1); c7 <= min(6 * c2 + 4, N - 2); c7 += 1)
                  calc_ping(1, c6, c7);
        }
        if ((N + 4) % 6 == 5 && N + 3 * c1 == 1)
          for (c6 = N - 4; c6 < N - 2; c6 += 1)
            calc_ping(1, c6, N - 2);
      } else
        for (c2 = max(max(c1 + 1, -c1 - (N + 7) / 6), 0); c2 <= min(min(-c1, (N - 1) / 6), (2 * N + 3 * c1 - 2) / 6); c2 += 1)
          for (c3 = max(max(max(c1 - c2 - (N + 5) / 6 + 1, 2 * c1 - 1), -N + (N - 1) / 3 + 2), 2 * c1 - 2 * c2); c3 <= min(min(2 * c1 - 2 * c2 + N / 3 + 1, 2 * c1 + 3), c1 - c2); c3 += 1)
            for (c6 = max(max(max(6 * c1 - 6 * c2 - 6 * c3 - 1, -N - 3 * c3 + 1), 1), -6 * c2 - 3 * c3 - 5); c6 <= min(min(min(-6 * c2 - 3 * c3 + 2, -3 * c3), N - 2), 6 * c1 - 6 * c2 - 6 * c3 + 4); c6 += 1)
              for (c7 = max(max(6 * c2 - 1, 1), -3 * c3 - c6 - 1); c7 <= min(min(N - 2, -3 * c3 - c6 + 1), 6 * c2 + 4); c7 += 1)
                calc_ping(1, c6, c7);
    }
}
