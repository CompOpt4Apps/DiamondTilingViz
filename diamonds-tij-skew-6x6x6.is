{
  for (c6 = 0; c6 < N; c6 += 1)
    for (c7 = 0; c7 < N; c7 += 1)
      do_init_pong(c6, c7);
  for (c6 = 0; c6 < N; c6 += 1) {
    do_edge_pong(c6, 0);
    if (c6 + 1 == N)
      for (c7 = 1; c7 < N - 1; c7 += 1)
        do_edge_pong(N - 1, c7);
    if (c6 == 0)
      for (c7 = 1; c7 < N - 1; c7 += 1)
        do_edge_pong(0, c7);
    if (N >= 2)
      do_edge_pong(c6, N - 1);
  }
  startclock();
  if (N >= 3 && T >= 1) {
    for (c2 = 0; c2 < floord(N, 6); c2 += 1)
      for (c3 = -c2 - (N + 6) / 6; c3 < -c2 - 1; c3 += 1)
        calc_ping(1, -6 * c2 - 6 * c3 - 8, 6 * c2 + 4);
    if (T == 1) {
      for (c1 = -1; c1 <= min(0, floord(N - 1, 3) - 1); c1 += 1)
        for (c2 = max(c1 - (N + 5) / 6 + 2, 0); c2 <= (N - 1) / 6; c2 += 1)
          for (c3 = max(c1 - c2 - (N + 5) / 6 + 1, -((N + 3) / 3) + 1); c3 <= min(-1, c1 - c2); c3 += 1)
            for (c6 = max(max(1, -N - 6 * c3 - 2), 6 * c1 - 6 * c2 - 6 * c3 - 1); c6 <= min(min(min(6 * c1 - 6 * c2 - 6 * c3 + 4, N - 2), -6 * c2 - 6 * c3 + 2), -6 * c3); c6 += 1)
              for (c7 = max(max(-6 * c3 - c6 - 4, 6 * c2 - 1), 1); c7 <= min(min(-6 * c3 - c6 + 1, 6 * c2 + 4), N - 2); c7 += 1)
                calc_ping(1, c6, c7);
    } else
      for (c1 = -1; c1 <= min((3 * T + N + 2) / 6 - 1, T / 2); c1 += 1)
        for (c2 = max(max((c1 + 1) / 3, c1 - (T + 2) / 3 + 1), floord(-N + 6 * c1 - 3, 18) + 1); c2 <= min(min((N + 2 * c1 + 1) / 6, (2 * N + 3 * c1 - 1) / 9), (T + N - 2) / 6); c2 += 1)
          if (N + 6 * c1 + 4 >= 6 * c2) {
            if (6 * c2 + 3 == N && c1 + 1 == 0) {
              calc_ping(1, N - 2, N - 2);
            } else if ((N - 1) % 6 == 0 && c1 + 1 == 0)
              for (c7 = 6 * c2 + 3; c7 <= 6 * c2 + 4; c7 += 1)
                calc_ping(1, N - 2, c7);
            for (c3 = max(max(max(max(max(c1 - 2 * c2 - (N + 2) / 6, c1 - c2 - (N + 2 * c1 + 7) / 6 + 1), -((N + 2) / 3) + 1), c1 - c2 - (T + N + 4) / 6 + 1), -c2 + floord(-N + 2 * c1 + 2 * c2, 4) + 1), -c2 - (N + 4) / 6); c3 <= min(min(min(min((T - 2) / 6, c1 - c2 - (c1 + 1) / 3), -c2 + floord(c1 + c2, 2)), -c2 + (T - 1) / 3), c1 - 2 * c2 + (N + 2) / 6); c3 += 1) {
              for (c4 = max(max(max(max(max(max(2 * c2 + 2 * c3 + 2 * floord(c2 + c3, 2) + 1, 2 * c1 - 4 * c2 + 2 * floord(c1 + c2, 2) + 1), 6 * c3 + 1), -((N + 1) % 2) - N + 6 * c2 + 2), -((N + 1) % 2) - N + 6 * c1 - 6 * c2 - 6 * c3 + 2), 1), 2 * c1 - 1); c4 <= min(min(min(min(min(min(2 * N + 6 * c3, T - 1), 3 * c1 - 3 * c2 + N / 2 + 3), 3 * c2 + 3 * c3 + N / 2 + 3), 2 * c1 + 4), 6 * c1 - 6 * c2 - 6 * c3 + 3), 6 * c2 + 3); c4 += 2) {
                if (c4 >= 6 * c3 + 3 && c4 >= 2 * c1 + 1)
                  for (c6 = max(max(1, -N - 6 * c3 + c4 - 3), 6 * c1 - 6 * c2 - 6 * c3 - c4); c6 <= min(min(min(-6 * c3 + c4 - 1, N - 2), 6 * c1 - 6 * c2 - 6 * c3 - c4 + 5), -6 * c2 - 6 * c3 + 2 * c4); c6 += 1)
                    for (c7 = max(max(-6 * c3 + c4 - c6 - 5, 6 * c2 - c4), 1); c7 <= min(min(6 * c2 - c4 + 5, -6 * c3 + c4 - c6), N - 2); c7 += 1)
                      calc_ping(c4, c6, c7);
                for (c6 = max(max(max(-6 * c2 - 6 * c3 + 2 * c4 - 8, 6 * c1 - 6 * c2 - 6 * c3 - c4 - 1), -N - 6 * c3 + c4 - 2), 1); c6 <= min(min(min(N - 2, -6 * c2 - 6 * c3 + 2 * c4 + 2), 6 * c1 - 6 * c2 - 6 * c3 - c4 + 4), -6 * c3 + c4); c6 += 1)
                  for (c7 = max(max(6 * c2 - c4 - 1, 1), -6 * c3 + c4 - c6 - 4); c7 <= min(min(N - 2, -6 * c3 + c4 - c6 + 1), 6 * c2 - c4 + 4); c7 += 1)
                    calc_pong(c4 + 1, c6, c7);
              }
              if (N + 6 * c2 + 6 * c3 + 1 == 4 * c1 && T >= 2 * c1 + 4) {
                for (c7 = -2 * c1 + 6 * c2 + 1; c7 <= -2 * c1 + 6 * c2 + 2; c7 += 1)
                  calc_ping(2 * c1 + 3, N - 2, c7);
              } else if (N + 3 * c3 == c1 + 1 && 6 * c2 + 1 == N + 2 * c1 && T >= 2 * c1 + 4) {
                calc_ping(2 * c1 + 3, N - 2, N - 2);
              } else if ((T - 1) % 2 == 0 && N + 6 * c1 + 6 >= 2 * T + 6 * c2 && 2 * c1 + 3 >= T) {
                for (c6 = max(max(T - N - 6 * c3 - 3, -T + 6 * c1 - 6 * c2 - 6 * c3), 1); c6 <= min(min(min(-T + 6 * c1 - 6 * c2 - 6 * c3 + 5, 2 * T - 6 * c2 - 6 * c3), T - 6 * c3 - 1), N - 2); c6 += 1)
                  for (c7 = max(max(1, T - 6 * c3 - c6 - 5), -T + 6 * c2); c7 <= min(min(-T + 6 * c2 + 5, N - 2), T - 6 * c3 - c6); c7 += 1)
                    calc_ping(T, c6, c7);
              } else if (6 * c2 == N + 2 * c1 + 1) {
                for (c6 = -N + 2 * c1 - 6 * c3; c6 <= -N + 2 * c1 - 6 * c3 + 1; c6 += 1)
                  calc_ping(2 * c1 + 3, c6, N - 2);
              } else if (2 * c1 >= 3 * c2 + 3 * c3 + 1 && N + 6 * c2 + 6 * c3 >= 4 * c1 + 2 && T >= 2 * c1 + 5 && 3 * c2 >= c1 + 1 && N + 2 * c1 >= 6 * c2 + 2)
                calc_ping(2 * c1 + 5, 4 * c1 - 6 * c2 - 6 * c3, -2 * c1 + 6 * c2);
            }
          } else
            for (c3 = (-N + 1) / 3; c3 < -((N + 4) / 6); c3 += 1)
              for (c6 = -N - 6 * c3 - 2; c6 < -N - 6 * c3; c6 += 1)
                calc_ping(1, c6, N - 2);
  }
}
