{
  for (c6 = 0; c6 < N; c6 += 1)
    for (c7 = 0; c7 < N; c7 += 1)
      do_init_pong(c6, c7);
  for (c6 = 0; c6 < N; c6 += 1) {
    do_edge_pong(c6, 0);
    if (c6 + 1 == N)
      for (c7 = 1; c7 < N - 1; c7 += 1)
        do_edge_pong(N - 1, c7);
    if (c6 == 0)
      for (c7 = 1; c7 < N - 1; c7 += 1)
        do_edge_pong(0, c7);
    if (N >= 2)
      do_edge_pong(c6, N - 1);
  }
  startclock();
  if (N >= 3 && T >= 1)
    for (c1 = -1; c1 <= T + floord(-2 * T + N - 2, 6); c1 += 1) {
      if (c1 + 1 == 0 && T >= 2) {
        for (c2 = 0; c2 < floord(N - 2, 6); c2 += 1)
          for (c3 = -c2 - 2; c3 < -c2; c3 += 1)
            for (c7 = 3 * c2 - 3 * c3 - 2; c7 <= 6 * c2 + 4; c7 += 1)
              calc_ping(1, -3 * c2 - 3 * c3 - 2, c7);
      } else if (T == 1) {
        for (c2 = max(c1 + floord(-N, 6) + 1, 0); c2 <= min(min(c1 + floord(N - 2, 6), c1 + floord(N, 2) - 2), floord(N - 1, 6)); c2 += 1)
          for (c3 = max(max(max(-c2 - (N + 6) / 6, -c1 + c2 - (N + 3) / 3), -c1 - c2 - 3), c1 - c2 - (N + 2) / 3 + 1); c3 <= min(min(min(-c1 - c2 + 1, -1), c1 - c2), -c1 + c2); c3 += 1)
            for (c6 = max(max(max(3 * c1 - 3 * c2 - 3 * c3 - 1, 1), -6 * c2 - 6 * c3 - 8), -N - 6 * c3 - 2); c6 <= min(min(min(3 * c1 - 3 * c2 - 3 * c3 + 1, -6 * c3), N - 2), -6 * c2 - 6 * c3 + 2); c6 += 1)
              for (c7 = max(max(1, -6 * c3 - c6 - 4), 6 * c2 - 1); c7 <= min(min(N - 2, -6 * c3 - c6 + 1), 6 * c2 + 4); c7 += 1)
                calc_ping(1, c6, c7);
      } else
        for (c2 = max(max(-T + c1 + floord(3 * T - N + 2, 6) + 1, floord(-N + 6 * c1 - 9, 24) + 1), 0); c2 <= min(min(min(c1 + (N - 2) / 6, (T + N - 2) / 6), (2 * N + 3 * c1 - 1) / 12), c1 + N / 2 - 2); c2 += 1) {
          if (6 * c1 + 7 == N && N >= 6 * c2 + 7) {
            for (c7 = 6 * c2 + 3; c7 <= 6 * c2 + 4; c7 += 1)
              calc_ping(1, N - 2, c7);
          } else {
            if (N >= 6 * c1 + 12 && N >= 6 * c2 + 8)
              calc_ping(1, 6 * c1 + 10, 6 * c2 + 4);
            if ((N + 3 * c1 - 3 * c2 + 3) % 3 <= 1 && ((N + 3 * c1 - 3 * c2 + 3) % 3) + 4 * c2 >= 4 * c1 + 4)
              for (c6 = max(2 * N + 6 * c1 - 12 * c2 - 4, N + 6 * c1 - 6 * c2 + 2); c6 <= min(min(2 * N + 6 * c1 - 12 * c2 + 2, 6 * c1 + 10), N + 6 * c1 - 6 * c2 + 4); c6 += 1)
                for (c7 = max(6 * c2 - 1, -(2 * ((-3 * c1 + 3 * c2 + c6 + 1) % 3)) - 6 * c1 + 6 * c2 + c6 - 2); c7 <= min(N - 2, 6 * c2 + 4); c7 += 1)
                  calc_ping(1, c6, c7);
          }
          for (c3 = max(max(max(max(max(max(-c1 + c2 - (N + 1) / 3, -c2 + floord(-N + 2 * c1 + 2, 4)), -N - c1 + 5 * c2), c1 - c2 - (T + N + 1) / 3 + 1), -c2 - (N + 4) / 6), floord(-N + c1 - c2, 3) + 1), -c1 - c2 - 2); c3 <= min(min(min(min(min(min(-c1 + 5 * c2 + 2, T - c1 - c2), -c2 + floord(c1, 2)), T - c1 + c2 - (T + 3) / 3), -c2 + (T - 1) / 3), floord(c1 - c2 - 1, 3)), c1 - c2 - 1); c3 += 1) {
            for (c4 = max(max(max(max(max(-2 * c2 + 2 * floord(3 * c1 + c2 + 3 * c3, 4) + 1, 1), 2 * c2 + 2 * c3 + 2 * floord(c2 + c3, 2) + 1), -((N + 1) % 2) - N + 6 * c2 + 2), -((N + c1 + c2 + c3 + 1) % 2) - N + 3 * c1 - 3 * c2 - 3 * c3 + 2), 2 * floord(c1 + c2 + c3 + 1, 2) - 1); c4 <= min(min(min(min(min(3 * c1 - 3 * c2 - 3 * c3, T - 1), 3 * c2 + 3 * c3 + N / 2 + 3), c1 - 2 * c2 + c3 + (N + c1 + c2 + c3 + 1) / 2 + 1), c1 + c2 + c3 + 3), 6 * c2 + 3); c4 += 2) {
              for (c6 = max(3 * c1 - 3 * c2 - 3 * c3 - c4, 1); c6 <= min(min(min(-6 * c3 + c4 - 1, N - 2), 3 * c1 - 3 * c2 - 3 * c3 - c4 + 2), -6 * c2 - 6 * c3 + 2 * c4); c6 += 1)
                for (c7 = max(max(6 * c2 - c4, 1), -6 * c3 + c4 - c6 - 5); c7 <= min(min(-6 * c3 + c4 - c6, N - 2), 6 * c2 - c4 + 5); c7 += 1)
                  calc_ping(c4, c6, c7);
              for (c6 = max(max(max(-6 * c2 - 6 * c3 + 2 * c4 - 8, 3 * c1 - 3 * c2 - 3 * c3 - c4 - 1), 1), -N - 6 * c3 + c4 - 2); c6 <= min(min(min(3 * c1 - 3 * c2 - 3 * c3 - c4 + 1, -6 * c3 + c4), N - 2), -6 * c2 - 6 * c3 + 2 * c4 + 2); c6 += 1)
                for (c7 = max(max(1, -6 * c3 + c4 - c6 - 4), 6 * c2 - c4 - 1); c7 <= min(min(N - 2, 6 * c2 - c4 + 4), -6 * c3 + c4 - c6 + 1); c7 += 1)
                  calc_pong(c4 + 1, c6, c7);
            }
            if ((N + 2 * c1 + 8 * c2 + 8) % 8 == 7 && N + 4 * c2 + 4 * c3 + 1 == 2 * c1 && 4 * T + N >= 6 * c1 + 15) {
              for (c7 = (N - 6 * c1 + 24 * c2 + 5) / 4; c7 <= -2 * c1 + 6 * c2 + (N + 2 * c1 + 1) / 4 + 2; c7 += 1)
                calc_ping((-N + 6 * c1 + 11) / 4, N - 2, c7);
            } else if ((T - 1) % 2 == 0 && 3 * c1 >= T + 3 * c2 + 3 * c3 && c1 + c2 + c3 + 3 >= T && N + 3 * c1 + 3 * c3 + 3 >= 2 * T + 3 * c2) {
              for (c6 = max(-T + 3 * c1 - 3 * c2 - 3 * c3, 1); c6 <= min(min(min(N - 2, -T + 3 * c1 - 3 * c2 - 3 * c3 + 2), 2 * T - 6 * c2 - 6 * c3), T - 6 * c3 - 1); c6 += 1)
                for (c7 = max(max(T - 6 * c3 - c6 - 5, -T + 6 * c2), 1); c7 <= min(min(N - 2, -T + 6 * c2 + 5), T - 6 * c3 - c6); c7 += 1)
                  calc_ping(T, c6, c7);
            } else if (c1 + c2 + c3 + 2 >= 2 * ((N + 3 * c1 - 3 * c2 + 3 * c3 + 5) / 4) && T >= 2 * ((N + 3 * c1 - 3 * c2 + 3 * c3 + 5) / 4) + 1 && 3 * c1 >= 3 * c2 + 3 * c3 + 2 * ((N + 3 * c1 - 3 * c2 + 3 * c3 + 5) / 4) + 1) {
              for (c6 = -N - 6 * c3 + 2 * ((N + 3 * c1 - 3 * c2 + 3 * c3 + 5) / 4) - 2; c6 <= 3 * c1 - 3 * c2 - 3 * c3 - 2 * ((N + 3 * c1 - 3 * c2 + 3 * c3 + 5) / 4) + 1; c6 += 1)
                for (c7 = max(-6 * c3 - c6 + 2 * ((N + 3 * c1 - 3 * c2 + 3 * c3 + 5) / 4) - 4, 6 * c2 - 2 * ((N + 3 * c1 - 3 * c2 + 3 * c3 + 5) / 4) - 1); c7 < N - 1; c7 += 1)
                  calc_ping(2 * c1 - 2 * c2 + 2 * c3 + 2 * floord(N - c1 + c2 - c3 - 1, 4) + 3, c6, c7);
            } else if ((c1 + c2 - c3 + 2) % 2 == 1 && T >= c1 + c2 + c3 + 4 && N + 4 * c2 + 4 * c3 >= 2 * c1 && 5 * c2 >= c1 + c3 + 1 && c1 >= 2 * c2 + 2 * c3 + 2 && N + c1 + c3 >= 5 * c2 + 3)
              calc_ping(c1 + c2 + c3 + 4, 2 * c1 - 4 * c2 - 4 * c3 - 2, -c1 + 5 * c2 - c3 + 1);
            if ((c1 + c2 - c3 + 1) % 2 == 1 && T + 3 * c2 + 3 * c3 >= 3 * c1 + 1)
              for (c7 = max(-3 * c1 + 9 * c2 + 3 * c3 - 1, 3 * c1 - 3 * c2 - 9 * c3 - 5); c7 <= min(min(3 * c1 - 3 * c2 - 9 * c3, N - 2), -3 * c1 + 9 * c2 + 3 * c3 + 4); c7 += 1)
                calc_ping(3 * c1 - 3 * c2 - 3 * c3 + 1, 1, c7);
          }
          if (c1 == 0 && c2 >= 1)
            for (c7 = 6 * c2 - 1; c7 <= 6 * c2; c7 += 1)
              calc_ping(1, 1, c7);
        }
      if ((N + 6 * c1 + 4) % 6 >= 1 && 2 * ((N + 6 * c1 + 4) % 6) >= 9 * c1 + 9 && N + 2 * c1 >= 2 * ((N + 6 * c1 + 4) / 6) + 4)
        for (c3 = max(-((N + 7) / 6), -c1 - (N + 6) / 6 - 1); c3 <= -((N + 4) / 6); c3 += 1)
          for (c6 = max(1, -N - 6 * c3 - 2); c6 <= -N - 3 * c3 + (N + 1) / 2 + 1; c6 += 1)
            if (2 * ((3 * c1 - 3 * c3 - c6 + 1) % 3) + N + 6 * c3 + 2 * c6 + 2 >= 0 && 2 * ((3 * c1 - 3 * c3 - c6 + 1) % 3) + N + 6 * c3 + 2 * c6 <= 3)
              for (c7 = max(-(2 * ((3 * c1 - 3 * c3 - c6 + 1) % 3)) + 6 * c1 - 6 * c3 - 2 * c6 + 1, -6 * c3 - c6 - 4); c7 <= min(-(2 * ((3 * c1 - 3 * c3 - c6 + 1) % 3)) + 6 * c1 - 6 * c3 - 2 * c6 + 6, N - 2); c7 += 1)
                calc_ping(1, c6, c7);
      if (c1 + 1 == 0 && N <= 5)
        for (c7 = 1; c7 < N - 1; c7 += 1)
          calc_ping(1, 1, c7);
    }
}
