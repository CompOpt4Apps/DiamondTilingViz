# Using iscc by Sven Verdoolaege:
#   /s/bach/e/proj/rtrt/software/bin/iscc < isl-calc-tutorial.iscc
#
# There are C interfaces for using the below code generation
# technology.  With the calculator we can prototype things.
# ISL stands for integer set library.
#
# See the file barvinok-tutorial.pdf for more info about iscc.
#

######################################################
### Using iscc
#
# It is installed on the linux machines in /s/bach/e/proj/rtrt/software/bin/.

######################################################
### Short tutorial on representing loops as sets
#Assume we start with the following loop:
# for (t=1; t<T; t++) { // time stepping loop 
#   for (i=Li; i<Ui; i++) { // lower and upper bounds for i
#       for (j=Lj; j<Uj; j++) {
#           // computation
#       }
#   }
# }

# We represent the iteration space for the loop in iscc as follows:
I := [T, Li, Ui, Lj, Uj] -> { computation[t,i,j] : 
                              1<=t<T && Li<= i < Ui && Lj <= j < Uj };
I;
# Code generation:
#codegen I;


############# Diamond Tiling
# Think of the other loop as the "time" loop.
# The inner loops are the spatial loops.
# Diamond tiling in the t, i, and j directions.
# Tiling hyperplanes from \cite{UdaySC12} paper.
# 1  1  0
# 1  0  1
# 1 -1 -1
#
# See tiling.in (which is input for the omega calculator) for 
# a description of how the tiling hyperplanes and the
# remainder theorem can result in the below formulation.
#
# The 12's indicate tile sizes.
# Pretty sure it needs to be a multiple of 6.
T_diamond := {computation[t,i,j]  -> [k0,k1, k2,  t, i, j] :
    exists r0,r1,r2: 0 <=r0<12 && 0<=r1<12 && 0<=r2<12
    && 12*k0+r0 = t+i && 12*k1+r1 = t+j && 12*k2+r2 = t-i-j };

# This one generates a lot of code.
#codegen (T_diamond * I);

# Does putting in some assumptions help?  Nope.
#codegen (T_diamond * I) assuming [T,Li,Ui,Lj,Uj] -> {:T>1 && Li<Ui && Lj<Uj};



############# Doing wavefronts
# We want a schedule that executes all of the tiles that can be
# done in parallel and then goes onto the next layer, etc.
# To do this we determine which tiles can be executed in parallel
# For the tiling hyperplanes given above, when k0+k1+k2
# is equivalent for 2 tiles, then they can be executed in parallel.
# I probably figured that out by using the visualizer and 
# some trial and error.
#
T_diamond_with_skew := {computation[t,i,j]  -> [thyme,k1, k2,  t, i, j] :
    exists k0,r0,r1,r2: 0 <=r0<12 && 0<=r1<12 && 0<=r2<12
    && thyme=k0+k1+k2
    && 12*k0+r0 = t+i && 12*k1+r1 = t+j && 12*k2+r2 = t-i-j };

# The code after this transformation is even more complex.
#codegen (T_diamond_with_skew * I);
# Does the assuming phrase help here?
#codegen (T_diamond_with_skew * I) assuming [T,Li,Ui,Lj,Uj] -> {:T>1 && Li<Ui && Lj<Uj};


########
# Now let's restrict the time loop to iterations 1 and 2, which appear to
# have no pointy bits.
Islice := [T, Li, Ui, Lj, Uj] -> { computation[t,i,j] : 
                              1<=t<=2 && Li<= i < Ui && Lj <= j < Uj };
codegen (T_diamond_with_skew * Islice) assuming [Li,Ui,Lj,Uj] -> { : Li<Ui && Lj<Uj};


########
# More general wrt t, but pin spatial dimensions to start at 1.
# Actually this ends up being more code in the outer loop than just keeping the Li
# and Lj.
Islice := [T, Ui, Uj] -> { computation[t,i,j] : 
                              1<=t<=T && 1<= i < Ui && 1 <= j < Uj };
#codegen (T_diamond_with_skew * Islice) assuming [T,Ui,Uj] -> { : 1<T && 1<Ui && 1<Uj};

#########
# More general wrt t upper bound.  TAU still equal to 12.
Islice := [T, Li, Ui, Lj, Uj] -> { computation[t,i,j] : 
                              1<=t<=T && Li<= i < Ui && Lj <= j < Uj };
codegen (T_diamond_with_skew * Islice) assuming [Li,Ui,Lj,Uj] -> { : Li<Ui && Lj<Uj};

#########
# TAU equal to 3.
T_diamond_with_skew := {computation[t,i,j]  -> [thyme,k1, k2,  t, i, j] :
    exists k0,r0,r1,r2: 0 <=r0<3 && 0<=r1<3 && 0<=r2<3
    && thyme=k0+k1+k2
    && 3*k0+r0 = t+i && 3*k1+r1 = t+j && 3*k2+r2 = t-i-j };

codegen (T_diamond_with_skew * Islice) assuming [Li,Ui,Lj,Uj] -> { : Li<Ui && Lj<Uj};

#########
# TAU equal to 6.
T_diamond_with_skew := {computation[t,i,j]  -> [thyme,k1, k2,  t, i, j] :
    exists k0,r0,r1,r2: 0 <=r0<6 && 0<=r1<6 && 0<=r2<6
    && thyme=k0+k1+k2
    && 6*k0+r0 = t+i && 6*k1+r1 = t+j && 6*k2+r2 = t-i-j };

codegen (T_diamond_with_skew * Islice) assuming [Li,Ui,Lj,Uj] -> { : Li<Ui && Lj<Uj};

#########
# TAU equal to 9.
T_diamond_with_skew := {computation[t,i,j]  -> [thyme,k1, k2,  t, i, j] :
    exists k0,r0,r1,r2: 0 <=r0<9 && 0<=r1<9 && 0<=r2<9
    && thyme=k0+k1+k2
    && 9*k0+r0 = t+i && 9*k1+r1 = t+j && 9*k2+r2 = t-i-j };

codegen (T_diamond_with_skew * Islice) assuming [Li,Ui,Lj,Uj] -> { : Li<Ui && Lj<Uj};

#########
# TAU equal to 15.
T_diamond_with_skew := {computation[t,i,j]  -> [thyme,k1, k2,  t, i, j] :
    exists k0,r0,r1,r2: 0 <=r0<15 && 0<=r1<15 && 0<=r2<15
    && thyme=k0+k1+k2
    && 15*k0+r0 = t+i && 15*k1+r1 = t+j && 15*k2+r2 = t-i-j };

codegen (T_diamond_with_skew * Islice) assuming [Li,Ui,Lj,Uj] -> { : Li<Ui && Lj<Uj};

#########
# TAU equal to 18.
T_diamond_with_skew := {computation[t,i,j]  -> [thyme,k1, k2,  t, i, j] :
    exists k0,r0,r1,r2: 0 <=r0<18 && 0<=r1<18 && 0<=r2<18
    && thyme=k0+k1+k2
    && 18*k0+r0 = t+i && 18*k1+r1 = t+j && 18*k2+r2 = t-i-j };

codegen (T_diamond_with_skew * Islice) assuming [Li,Ui,Lj,Uj] -> { : Li<Ui && Lj<Uj};

#########
# TAU equal to 21.
T_diamond_with_skew := {computation[t,i,j]  -> [thyme,k1, k2,  t, i, j] :
    exists k0,r0,r1,r2: 0 <=r0<21 && 0<=r1<21 && 0<=r2<21
    && thyme=k0+k1+k2
    && 21*k0+r0 = t+i && 21*k1+r1 = t+j && 21*k2+r2 = t-i-j };

codegen (T_diamond_with_skew * Islice) assuming [Li,Ui,Lj,Uj] -> { : Li<Ui && Lj<Uj};

#########
# TAU equal to 24.
T_diamond_with_skew := {computation[t,i,j]  -> [thyme,k1, k2,  t, i, j] :
    exists k0,r0,r1,r2: 0 <=r0<24 && 0<=r1<24 && 0<=r2<24
    && thyme=k0+k1+k2
    && 24*k0+r0 = t+i && 24*k1+r1 = t+j && 24*k2+r2 = t-i-j };

codegen (T_diamond_with_skew * Islice) assuming [Li,Ui,Lj,Uj] -> { : Li<Ui && Lj<Uj};

#########
# TAU equal to 27.
T_diamond_with_skew := {computation[t,i,j]  -> [thyme,k1, k2,  t, i, j] :
    exists k0,r0,r1,r2: 0 <=r0<27 && 0<=r1<27 && 0<=r2<27
    && thyme=k0+k1+k2
    && 27*k0+r0 = t+i && 27*k1+r1 = t+j && 27*k2+r2 = t-i-j };

codegen (T_diamond_with_skew * Islice) assuming [Li,Ui,Lj,Uj] -> { : Li<Ui && Lj<Uj};

#########
# TAU equal to 30.
T_diamond_with_skew := {computation[t,i,j]  -> [thyme,k1, k2,  t, i, j] :
    exists k0,r0,r1,r2: 0 <=r0<30 && 0<=r1<30 && 0<=r2<30
    && thyme=k0+k1+k2
    && 30*k0+r0 = t+i && 30*k1+r1 = t+j && 30*k2+r2 = t-i-j };

codegen (T_diamond_with_skew * Islice) assuming [Li,Ui,Lj,Uj] -> { : Li<Ui && Lj<Uj};

#########
# TAU equal to 33.
T_diamond_with_skew := {computation[t,i,j]  -> [thyme,k1, k2,  t, i, j] :
    exists k0,r0,r1,r2: 0 <=r0<33 && 0<=r1<33 && 0<=r2<33
    && thyme=k0+k1+k2
    && 33*k0+r0 = t+i && 33*k1+r1 = t+j && 33*k2+r2 = t-i-j };

codegen (T_diamond_with_skew * Islice) assuming [Li,Ui,Lj,Uj] -> { : Li<Ui && Lj<Uj};

