# Using Omega+ by Mary Hall's group:
#   ./ocplus < omega-calc-tutorial.in
# There are C interfaces for using the below code generation
# technology.  With the calculator we can prototype things.
# FIXME: Actually ended up using omega (oc) because
# omega+ (ocplus) has an error on the diamond tiling.

######################################################
### Using ocplus
#
# FIXME: Cathie I can't find my notes on where the package
# is and how to download and install it for the linux boxes.

######################################################
### Short tutorial on representing loops as sets
#Assume we start with the following loop:
#   for (i=Li; i<Ui; i++) { // lower and upper bounds for i
#       for (j=Lj; j<Uj; j++) {
#           // computation
#       }
#   }

# We represent the iteration space for the loop in omega as follows:
symbolic Li, Ui, Lj, Uj;
I := { [i,j] : Li<= i < Ui && Lj <= j < Uj };
I;
# Code generation:
codegen I;
# Using the "given" phrase we can get rid of those ifs.
codegen I given { [i,j] : Li<Ui && Lj<Uj};


############# Diamond Tiling
# Think of the other loop as the "time" loop.
# The inner loop is the spatial loop.
# Diamond tiling in the i and j directions.
# Tiling hyperplanes.
# 1  1
# 1 -1
#
# The 6's indicate tile sizes.
T_diamond := {[i,j]  -> [k0, k1,  i, j] :
    exists (r0,r1: 0 <=r0<6 && 0<=r1<6 
    && 6*k0+r0 = i+j && 6*k1+r1 = i-j) };

codegen T_diamond:I;
# Get this error when using ocplus, works with oc.
#codegen error: Can't generate multiple wildcard GEQ guards right now


############# Doing wavefronts
## How can we calculate the number of wavefronts for a specific cube?
# 
# Do a wavefront we skew the loop and then permute it.
# The outer loop is the "wavefront number".
#
T_skew := {[i,j] -> [i,i+j]};
T_permute := {[i,j] -> [j,i]};
WaveI := T_permute(T_skew( I ));
WaveI;
#
# We can ignore the checks on the bounds and
# then the innermost loop is the one that iterates
# within a wavefront and is what you put the omp pragma on.
#
codegen WaveI given { [i,j] : Li<Ui && Lj<Uj};

## How to calculate the coordinates of the cells in the 
## wavefront, given the wavefront number?
#
# Omega does it for us.  If we tell the code generator that
# we want a transformation applied to a set during code gen (see below)
# then it will solve for the original loop indices in terms of the
# new loop indices and pass those into the statement macro.
# In this case t2 is equivalent to the original i index and the
# original j index is computed as t1-t2.
#
T_wave := T_permute compose T_skew;
codegen T_wave:I given { [i,j] : Li<Ui && Lj<Uj};


