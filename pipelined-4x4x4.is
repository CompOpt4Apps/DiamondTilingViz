{
  for (c6 = 0; c6 < N; c6 += 1)
    for (c7 = 0; c7 < N; c7 += 1)
      do_init_pong(c6, c7);
  for (c6 = 0; c6 < N; c6 += 1) {
    do_edge_pong(c6, 0);
    if (c6 + 1 == N)
      for (c7 = 1; c7 < N - 1; c7 += 1)
        do_edge_pong(N - 1, c7);
    if (c6 == 0)
      for (c7 = 1; c7 < N - 1; c7 += 1)
        do_edge_pong(0, c7);
    if (N >= 2)
      do_edge_pong(c6, N - 1);
  }
  startclock();
  for (c1 = 0; c1 <= floord(T, 4); c1 += 1)
    for (c2 = c1; c2 <= min(floord(T + N + 2, 4) - 1, c1 + floord(N + 1, 4)); c2 += 1)
      for (c3 = max(c1, -N - c1 + 2 * c2 + (N + 1) / 2); c3 <= min(min((T + N + 2) / 4 - 1, c1 + (N + 1) / 4), floord(N + 2 * c1 + 2 * c2, 4)); c3 += 1)
        for (c4 = max(max(max(4 * c1 - 1, 1), -((N + 1) % 2) - N + 4 * c3 + 2), -((N + 1) % 2) - N + 4 * c2 + 2); c4 <= min(min(min(T, 4 * c1 + 3), 4 * c2 + 2), 4 * c3 + 2); c4 += 2) {
          if (c4 >= 4 * c1 + 1)
            for (c6 = max(4 * c2 - c4, 1); c6 <= min(N - 2, 4 * c2 - c4 + 3); c6 += 1)
              for (c7 = max(1, 4 * c3 - c4); c7 <= min(N - 2, 4 * c3 - c4 + 3); c7 += 1)
                calc_ping(c4, c6, c7);
          if (T >= c4 + 1 && 4 * c1 + 1 >= c4)
            for (c6 = max(4 * c2 - c4 - 1, 1); c6 <= min(N - 2, 4 * c2 - c4 + 2); c6 += 1)
              for (c7 = max(1, 4 * c3 - c4 - 1); c7 <= min(N - 2, 4 * c3 - c4 + 2); c7 += 1)
                calc_pong(c4 + 1, c6, c7);
        }
}
